{"version":3,"sources":["utils/Api.tsx","components/Ranking.tsx","pages/ACRanking.tsx","pages/FastestRanking.tsx","pages/FirstRanking.tsx","pages/ShortRanking.tsx","pages/SumRanking.tsx","pages/LanguageOwners.tsx","utils/index.ts","utils/DateFormat.ts","utils/Url.tsx","pages/ListPage/index.tsx","pages/ListPage/SmallTable.tsx","pages/UserPage/FilteringHeatmap.tsx","pages/UserPage/ClimbingLineChart.tsx","pages/UserPage/DailyEffortBarChart.tsx","pages/UserPage/SmallPieChart.tsx","components/CalendarHeatmap.tsx","pages/TablePage.tsx","pages/UserPage/SubmissionList.tsx","pages/UserPage/LanguageCount.tsx","pages/UserPage/Recommendations.tsx","pages/UserPage/index.tsx","components/NavigationBar.tsx","pages/Monitor.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["UPDATED_BASE_URL","BASE_URL","STATIC_API_BASE_URL","generateRanking","problems","property","map","reduce","problem","user_id","count","get","set","Map","Array","from","_ref","_ref2","Object","slicedToArray","problem_count","getShortRanking","getFastRanking","getFirstRanking","fetchContestProblemPairs","fetchJson","fetchContests","fetchMergedProblems","fetchProblemPerformances","fetchSubmissions","user","concat","slice","toLowerCase","_callee","url","r","json","regenerator_default","a","wrap","_context","prev","next","fetch","sent","abrupt","stop","Ranking","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","_this2","then","users","sort","b","rank","cur","forEach","_","i","push","u","id","setState","react_default","createElement","Row","title","lib","height","pagination","striped","hover","options","paginationPosition","sizePerPage","sizePerPageList","text","value","length","dataField","isKey","React","Component","ACRanking","components_Ranking","rows","row","FastestRanking","ApiUrl","FirstRanking","ShortRanking","SumRanking","point_sum","ordinalNumbers","OneOwner","language","ranking","className","name","Col","key","LanguageOwners","rankings","entries","entry","e","arr","_ref3","_ref4","LanguageOwners_OneOwner","ATCODER_USER_REGEXP","ATCODER_RIVALS_REGEXP","isAccepted","result","ordinalSuffixOf","j","k","formatDate","epoch_second","date","Date","year","getFullYear","month","getMonth","day","getDate","StatusFilterState","RatedFilterState","formatContestUrl","contest","formatSubmissionUrl","formatProblemUrl","SmallTable","point_count_map","user_count_map","p","point","status","m","point_count","user_count","_ref5","Table_default","bordered","responsive","_ref6","_ref7","_ref8","_ref9","undefined","INF_POINT","FilterStatus","ListPage","fromPoint","toPoint","statusFilterState","All","ratedFilterState","Promise","all","Api","merged_problems","contests","performances","contestMap","performansMap","problem_id","minimum_performance","predict","showing_point","contest_id","performance","showing_performance","start_epoch_second","objectSpread","rivals","last_ac_date","localeCompare","updateProblems","user_ids","prevProps","prevState","_this3","flat","submissions","submission_map","submission","s","new_status","mine","filter","some","new_rivals_set","includes","add","Set","new_rivals","new_ac_date","reverse","new_problem","assign","_this4","columns","header","dataSort","dataFormat","href","Url","target","dataAlign","Badge","color","cell","toFixed","fastest_submission_id","fastest_contest_id","fastest_user_id","execution_time","shortest_submission_id","shortest_contest_id","shortest_user_id","source_code_length","first_submission_id","first_contest_id","first_user_id","hidden","point_set","points","ListPage_SmallTable","ButtonGroup_default","UncontrolledDropdown","DropdownToggle","caret","DropdownMenu","DropdownItem","onClick","Trying","Accepted","Rated","Unrated","keyField","search","trClassName","c","ClimbingLineChart","climbing_data","es6","width","margin","top","right","left","bottom","strokeDasharray","dataKey","type","domain","tickFormatter","ms","labelFormatter","v","stroke","DailyEffortBarChart","daily_data","fill","COLORS","SmallPieChart","trying","accepted","outerRadius","CalendarHeatmap","next_sunday","setDate","getDay","current_date","WEEKS","count_map","table_data","style","viewBox","block_width","Math","min","week","floor","x","y","UncontrolledTooltip","delay","show","hide","placement","formatTooltip","Status","FilteringHeatmap","filter_status","AllSubmissions","filtered_submissions","AllAccepted","UniqueAccepted","values","es_ButtonGroup","Button","active","components_CalendarHeatmap","unit","SubmissionList","title_map","verdictOptions","verdict","index","second","filterFormatted","LanguageCount","language_map","replace","language_count","size","md","xs","Recommendations","performance_map","contest_map","accepted_problem_ids","accepted_problem_id_set","accepted_problem_performances","predicted_performance","ceil","console","log","recommended_problems","has","pa","pb","abs","difficulty","UserPage","first_ranking","fast_ranking","short_ranking","user_info","accepted_count","accepted_count_rank","rated_point_sum","rated_point_sum_rank","problem_performances","current_streak","longest_streak","last_ac","edges","updateState","getUserIdFromProps","first_ac_map","_get_streak","get_streak","date_count_map","getTime","_this$state","shortest_rank","get_rank","fastest_rank","first_rank","d","ac_submissions","agc_solved","countSolved","abc_solved","arc_solved","achievements","UserPage_PieCharts","UserPage_DailyEffortBarChart","UserPage_ClimbingLineChart","UserPage_FilteringHeatmap","UserPage_SubmissionList","UserPage_LanguageCount","UserPage_Recommendations","PieCharts","solved","total","charAt","UserPage_SmallPieChart","seconds","_ref10","_ref11","second1","second2","max","today","last_ac_second","_ref12","_ref13","_ref14","contestRegexp","acSubmissions","regexps","problemIdSet","match","acProblemIdSet","shiftedProblemIds","substring","regexp","PageKind","get_table_class","Nothing","Solved","RivalSolved","TablePage","graph","edge","list","problemsMap","contestsWithProblemIds","problemIds","contestsWithProblems","problemList","abc","arc","agc","others","TablePage_AtCoderRegularTable","TablePage_ContestTable","ContestTable","es_Table","AtCoderRegularTable","max_problem_count","current","problem_heads","toUpperCase","columnClassName","Monitor","Col_default","Card","CardImg","src","alt","CardBody","CardTitle","CardSubtitle","PrimitiveNavigationBar","rival_id","kind","TABLE","nextKind","split","current_pathname","location","pathname","next_pathname","join","history","_this$mapPropsToState","mapPropsToState","_this$mapPropsToState2","USER","LIST","params","root_url","Navbar","light","expand","NavbarBrand","tag","RouterLink","to","Nav","navbar","Form","inline","FormGroup","Input","onKeyPress","submit","placeholder","onChange","nav","inNavbar","NavigationBar","withRouter","extractUserId","EdgeWarning","window","navigator","userAgent","indexOf","App","URLSearchParams","user_param","rivals_param","kind_param","HashRouter","components_NavigationBar","Container","maxWidth","App_EdgeWarning","Switch","Route","exact","path","component","pages_UserPage","pages_TablePage","pages_ListPage","render","Redirect","Boolean","hostname","ReactDOM","src_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"0VAMMA,EAAmB,6CACnBC,EAAW,+BACXC,EAAsBD,EAAW,aAYjCE,EAAkB,SACtBC,EACAC,GAEA,IAAMC,EAAMF,EAASG,OAAO,SAACD,EAAKE,GAChC,IAAMC,EAAUD,EAAQH,GACxB,GAAII,EAAS,CACX,IAAMC,EAAQJ,EAAIK,IAAIF,GACtB,OAAIC,EACKJ,EAAIM,IAAIH,EAASC,EAAQ,GAEzBJ,EAAIM,IAAIH,EAAS,GAG1B,OAAOH,GAER,IAAIO,KACP,OAAOC,MAAMC,KAAKT,GAAKA,IAAI,SAAAU,GAAA,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAF,EAAA,SAA+B,CACxDP,QADyBQ,EAAA,GAEzBG,cAFyBH,EAAA,OAMhBI,EAAkB,SAACjB,GAAD,OAC7BD,EAAgBC,EAAU,qBACfkB,EAAiB,SAAClB,GAAD,OAC5BD,EAAgBC,EAAU,oBACfmB,EAAkB,SAACnB,GAAD,OAC7BD,EAAgBC,EAAU,kBAoBfoB,EAA2B,kBACtCC,EACEzB,EAAmB,0BAEV0B,EAAgB,kBAC3BD,EAAqBzB,EAAmB,mBAG7B2B,EAAsB,kBACjCF,EAA2BvB,EAAsB,0BACtC0B,EAA2B,kBACtCH,EAKEvB,EAAsB,+BAGb2B,EAAmB,SAACC,GAAD,OAC9BL,EAAS,GAAAM,OAAkB/B,EAAlB,aAAA+B,OAA8CD,EAAKE,MAAM,EAAG,GAAGC,cAA/D,KAAAF,OAAgFD,EAAhF,oBAEIL,+EAAf,SAAAS,EAA4BC,GAA5B,IAAAC,EAAAC,EAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACkBC,MAAMT,GADxB,cACQC,EADRK,EAAAI,KAAAJ,EAAAE,KAAA,EAEqBP,EAAEC,OAFvB,cAEQA,EAFRI,EAAAI,KAAAJ,EAAAK,OAAA,SAGST,GAHT,wBAAAI,EAAAM,SAAAb,kDCGec,cAzEd,SAAAA,EAAYC,GAAc,IAAAC,EAAA,OAAAhC,OAAAiC,EAAA,EAAAjC,CAAAkC,KAAAJ,IACzBE,EAAAhC,OAAAmC,EAAA,EAAAnC,CAAAkC,KAAAlC,OAAAoC,EAAA,EAAApC,CAAA8B,GAAAO,KAAAH,KAAMH,KACDO,MAAQ,CAAEC,KAAM,IAFIP,mFAKN,IAAAQ,EAAAN,KACnBA,KAAKH,MAAML,QAAQe,KAAK,SAACC,GACxBA,EAAMC,KAAK,SAACtB,EAAGuB,GAAJ,OAAUA,EAAEpD,MAAQ6B,EAAE7B,QACjC,IAAMqD,EAAiB,GACnBC,EAAM,EACVJ,EAAMK,QAAQ,SAACC,EAAGC,GACbA,EAAI,GAAKP,EAAMO,GAAGzD,MAAQkD,EAAMO,EAAI,GAAGzD,QAC1CsD,EAAMG,EAAI,GAEXJ,EAAKK,KAAKJ,KAEX,IAAMP,EAAOG,EAAMtD,IAAI,SAAC+D,EAAGF,GAAJ,MAAW,CACjCzD,MAAO2D,EAAE3D,MACT4D,GAAID,EAAEC,GACNP,KAAMA,EAAKI,MAEZT,EAAKa,SAAS,CAAEd,4CAKjB,OACCe,EAAAjC,EAAAkC,cAACC,EAAA,EAAD,KACCF,EAAAjC,EAAAkC,cAAA,UAAKrB,KAAKH,MAAM0B,OAChBH,EAAAjC,EAAAkC,cAACG,EAAA,eAAD,CACCC,OAAO,OACPpB,KAAML,KAAKI,MAAMC,KACjBqB,YAAU,EACVC,SAAO,EACPC,OAAK,EACLC,QAAS,CACRC,mBAAoB,MACpBC,YAAa,GACbC,gBAAiB,CAChB,CACCC,KAAM,KACNC,MAAO,IAER,CACCD,KAAM,KACNC,MAAO,IAER,CACCD,KAAM,MACNC,MAAO,KAER,CACCD,KAAM,MACNC,MAAO,KAER,CACCD,KAAM,MACNC,MAAOlC,KAAKI,MAAMC,KAAK8B,WAK1Bf,EAAAjC,EAAAkC,cAACG,EAAA,kBAAD,CAAmBY,UAAU,QAA7B,KACAhB,EAAAjC,EAAAkC,cAACG,EAAA,kBAAD,CAAmBY,UAAU,KAAKC,OAAK,GAAvC,QAGAjB,EAAAjC,EAAAkC,cAACG,EAAA,kBAAD,CAAmBY,UAAU,SAA7B,kBAnEiBE,IAAMC,WCPbC,EARG,kBACjBpB,EAAAjC,EAAAkC,cAACoB,EAAD,CACClB,MAAM,mBACN/B,MAAO,kBF2C2BnB,EAvCfvB,kDEHMyD,KAAK,SAACmC,GAAD,OAAUA,EAAKxF,IAAI,SAACyF,GAAD,MAAU,CAAErF,MAAOqF,EAAI3E,cAAekD,GAAIyB,EAAItF,iBCGlFuF,EAPQ,kBACnBxB,EAAAjC,EAAAkC,cAACoB,EAAD,CACIlB,MAAM,6BACN/B,MAAO,kBAAMqD,IAA6BtC,KAAK,SAAAvD,GAAQ,OAAI6F,EAAsB7F,GAAUE,IAAI,SAAAU,GAAA,MAAiC,CAAEN,MAAnCM,EAAGI,cAAsDkD,GAAzDtD,EAAkBP,iBCI1GyF,EAPM,kBACjB1B,EAAAjC,EAAAkC,cAACoB,EAAD,CACIlB,MAAM,mBACN/B,MAAO,kBAAMqD,IAA6BtC,KAAK,SAAAvD,GAAQ,OAAI6F,EAAuB7F,GAAUE,IAAI,SAAAU,GAAA,MAAiC,CAAEN,MAAnCM,EAAGI,cAAsDkD,GAAzDtD,EAAkBP,iBCI3G0F,EAPM,kBACnB3B,EAAAjC,EAAAkC,cAACoB,EAAD,CACElB,MAAM,cACN/B,MAAO,kBAAMqD,IAA6BtC,KAAK,SAAAvD,GAAQ,OAAI6F,EAAuB7F,GAAUE,IAAI,SAAAU,GAAA,MAAiC,CAAEN,MAAnCM,EAAGI,cAAsDkD,GAAzDtD,EAAkBP,iBCQvG2F,EAXI,kBACjB5B,EAAAjC,EAAAkC,cAACoB,EAAD,CACElB,MAAM,sBACN/B,MAAO,kBN8CTnB,EAzCcvB,oDMJeyD,KAAK,SAAAmC,GAAI,OAChCA,EAAKxF,IAAI,SAAAyF,GAAG,MAAK,CAAErF,MAAOqF,EAAIM,UAAW/B,GAAIyB,EAAItF,0BCJnD6F,EAAiB,CAAC,MAAO,MAAO,OAOhCC,EAAW,SAAAvF,GAAA,IACfwF,EADexF,EACfwF,SACAC,EAFezF,EAEfyF,QAFe,OAOfjC,EAAAjC,EAAAkC,cAAA,WACED,EAAAjC,EAAAkC,cAACC,EAAA,EAAD,CAAKgC,UAAU,6CACblC,EAAAjC,EAAAkC,cAAA,UAAK+B,IAEPhC,EAAAjC,EAAAkC,cAACC,EAAA,EAAD,KACG+B,EAAQzE,MAAM,EAAG,GAAG1B,IAAI,SAAAW,EAAkBkD,GAAlB,IAAGwC,EAAH1F,EAAG0F,KAAMjG,EAATO,EAASP,MAAT,OACvB8D,EAAAjC,EAAAkC,cAACmC,EAAA,EAAD,CAAKC,IAAKF,EAAMD,UAAU,eACxBlC,EAAAjC,EAAAkC,cAAA,UAAK6B,EAAenC,IACpBK,EAAAjC,EAAAkC,cAAA,UAAKkC,GACLnC,EAAAjC,EAAAkC,cAAA,MAAIiC,UAAU,cAAchG,EAA5B,aA0DKoG,cA9Cb,SAAAA,EAAY7D,GAAY,IAAAC,EAAA,OAAAhC,OAAAiC,EAAA,EAAAjC,CAAAkC,KAAA0D,IACtB5D,EAAAhC,OAAAmC,EAAA,EAAAnC,CAAAkC,KAAAlC,OAAAoC,EAAA,EAAApC,CAAA4F,GAAAvD,KAAAH,KAAMH,KACDO,MAAQ,CACXuD,SAAU,IAHU7D,mFAOJ,IAAAQ,EAAAN,KPcpB3B,EAhDevB,oDOmCUyD,KAAK,SAAAqD,GAC1B,IAAM1G,EAAsD,IAAIO,IAChEmG,EAAQ/C,QAAQ,SAAAgD,GACd,IAAMC,EAAI,CACRP,KAAMM,EAAMxG,QACZC,MAAOuG,EAAMvG,OAETyG,EAAM7G,EAAIK,IAAIsG,EAAMT,UACtBW,EACFA,EAAI/C,KAAK8C,GAET5G,EAAIM,IAAIqG,EAAMT,SAAU,CAACU,MAI7B,IAAMH,EAAWjG,MAAMC,KAAKT,GAAKA,IAAI,SAAA8G,GAAA,IAAAC,EAAAnG,OAAAC,EAAA,EAAAD,CAAAkG,EAAA,SAA0B,CAC7DZ,SADmCa,EAAA,GAEnCZ,QAFmCY,EAAA,GAElBxD,KAAK,SAACtB,EAAGuB,GAAJ,OAAUA,EAAEpD,MAAQ6B,EAAE7B,WAE9CgD,EAAKa,SAAS,CAAEwC,gDAKlB,OACEvC,EAAAjC,EAAAkC,cAAA,WACGrB,KAAKI,MAAMuD,SAASzG,IAAI,SAAA2G,GAAK,OAC5BzC,EAAAjC,EAAAkC,cAAC6C,EAAD,CACET,IAAKI,EAAMT,SACXA,SAAUS,EAAMT,SAChBC,QAASQ,EAAMR,oBAvCEf,IAAMC,uDCvCtB4B,EAAsB,kBACtBC,GAAwB,mBACxBC,GAAa,SAACC,GAAD,MAA+B,OAAXA,GACjCC,GAAkB,SAACxD,GAC9B,IAAMyD,EAAIzD,EAAI,GACR0D,EAAI1D,EAAI,IACd,OAAS,GAALyD,GAAe,IAALC,EACL,KAEA,GAALD,GAAe,IAALC,EACL,KAEA,GAALD,GAAe,IAALC,EACL,KAEF,MCfF,SAASC,GAAWC,GAC1B,IAAMC,EAAO,IAAIC,KAAoB,IAAfF,GAChBG,EAAOF,EAAKG,cACZC,EAAQJ,EAAKK,WAAa,EAC1BC,EAAMN,EAAKO,UAGjB,OAAOL,EAAO,KAFIE,EAAQ,GAAK,IAAMA,EAAQA,GAEb,KADhBE,EAAM,GAAK,IAAMA,EAAMA,GCNxC,ICuBKE,GAMAC,GD3BQC,GAAmB,SAACC,GAAD,SAAA5G,OAFf,qBAEe,cAAAA,OAA6C4G,IAEhEC,GAAsB,SAACtE,EAAYqE,GAAb,SAAA5G,OAAoC2G,GAAiBC,GAArD,iBAAA5G,OAA6EuC,IAEnGuE,GAAmB,SAACrI,EAAiBmI,GAAlB,SAAA5G,OAAyC2G,GAAiBC,GAA1D,WAAA5G,OAA4EvB,yBE6E7FsI,GAzEI,SAAA9H,GAAkC,IAA/BZ,EAA+BY,EAA/BZ,SAAUK,EAAqBO,EAArBP,QACxBsI,EAAkB,IAAIlI,IACtBmI,EAAiB,IAAInI,IAC3BT,EAAS6D,QAAQ,SAAAgF,GACf,GAAIA,EAAEC,MAAO,CACX,IAAMxI,EAAQqI,EAAgBpI,IAAIsI,EAAEC,OAMpC,GALIxI,EACFqI,EAAgBnI,IAAIqI,EAAEC,MAAOxI,EAAQ,GAErCqI,EAAgBnI,IAAIqI,EAAEC,MAAO,GAE3BzB,GAAWwB,EAAEE,SAAW1I,EAAS,CACnC,IAAMH,EAAM0I,EAAerI,IAAIF,GAC/B,GAAIH,EAAK,CACP,IAAMI,EAAQJ,EAAIK,IAAIsI,EAAEC,OACpBxI,EACFJ,EAAIM,IAAIqI,EAAEC,MAAOxI,EAAQ,GAEzBJ,EAAIM,IAAIqI,EAAEC,MAAO,OAEd,CACL,IAAME,EAAI,IAAIvI,IACduI,EAAExI,IAAIqI,EAAEC,MAAO,GACfF,EAAepI,IAAIH,EAAS2I,QAMpC,IAAMC,EAAcvI,MAAMC,KAAKgI,GAC5BzI,IAAI,SAAAW,GAAA,IAAAmG,EAAAlG,OAAAC,EAAA,EAAAD,CAAAD,EAAA,SAAqB,CAAEiI,MAAvB9B,EAAA,GAA8B1G,MAA9B0G,EAAA,MACJvD,KAAK,SAACtB,EAAGuB,GAAJ,OAAUvB,EAAE2G,MAAQpF,EAAEoF,QAExBI,EAAaxI,MAAMC,KAAKiI,GAAgB1I,IAAI,SAAA+G,GAAA,IAAAkC,EAAArI,OAAAC,EAAA,EAAAD,CAAAmG,EAAA,SAAqB,CACrE5G,QADgD8I,EAAA,GAEhDjJ,IAFgDiJ,EAAA,MAKlD,OACE/E,EAAAjC,EAAAkC,cAAC+E,GAAAjH,EAAD,CAAOwC,SAAO,EAAC0E,UAAQ,EAACzE,OAAK,EAAC0E,YAAU,GACtClF,EAAAjC,EAAAkC,cAAA,aACED,EAAAjC,EAAAkC,cAAA,UACED,EAAAjC,EAAAkC,cAAA,mBACC4E,EAAY/I,IAAI,SAAAqJ,GAAA,IAAGT,EAAHS,EAAGT,MAAH,OACf1E,EAAAjC,EAAAkC,cAAA,MAAIoC,IAAKqC,GAAQA,MAGrB1E,EAAAjC,EAAAkC,cAAA,UACED,EAAAjC,EAAAkC,cAAA,mBACC4E,EAAY/I,IAAI,SAAAsJ,GAAA,IAAGV,EAAHU,EAAGV,MAAOxI,EAAVkJ,EAAUlJ,MAAV,OACf8D,EAAAjC,EAAAkC,cAAA,MAAIoC,IAAKqC,GAAQxI,OAIvB8D,EAAAjC,EAAAkC,cAAA,aACG6E,EAAWhJ,IAAI,SAAAuJ,GAAA,IAAGvJ,EAAHuJ,EAAGvJ,IAAKG,EAARoJ,EAAQpJ,QAAR,OACd+D,EAAAjC,EAAAkC,cAAA,MAAIoC,IAAKpG,GACP+D,EAAAjC,EAAAkC,cAAA,UAAKhE,GACJ4I,EAAY/I,IAAI,SAAAwJ,GAAe,IAAZZ,EAAYY,EAAZZ,MACZxI,EAAQJ,EAAIK,IAAIuI,GACtB,YAAaa,GAATrJ,EACK8D,EAAAjC,EAAAkC,cAAA,MAAIoC,IAAKqC,GAAQxI,GAEjB8D,EAAAjC,EAAAkC,cAAA,MAAIoC,IAAKqC,GAAT,iCDpDjBc,GAAY,eAEbxB,kFAMAC,+EEtBAwB,GFwnBUC,eApkBb,SAAAA,EAAYjH,GAAY,IAAAC,EAAA,OAAAhC,OAAAiC,EAAA,EAAAjC,CAAAkC,KAAA8G,IACtBhH,EAAAhC,OAAAmC,EAAA,EAAAnC,CAAAkC,KAAAlC,OAAAoC,EAAA,EAAApC,CAAAgJ,GAAA3G,KAAAH,KAAMH,KACDO,MAAQ,CACXpD,SAAU,GACV+J,UAAW,EACXC,QAASJ,GACTK,kBAAmB7B,GAAkB8B,IACrCC,iBAAkB9B,GAAiB6B,KAPfpH,mFAWJ,IAAAQ,EAAAN,KAClBoH,QAAQC,IAAI,CACVC,IACAA,IACAA,MACC/G,KAAK,SAAA3C,GAA+C,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAF,EAAA,GAA7C2J,EAA6C1J,EAAA,GAA5B2J,EAA4B3J,EAAA,GAAlB4J,EAAkB5J,EAAA,GAC/C6J,EAAaF,EAASrK,OAC1B,SAACD,EAAKqI,GAAN,OAAkBrI,EAAIM,IAAI+H,EAAQrE,GAAIqE,IACtC,IAAI9H,KAEAkK,EAAgBF,EAAatK,OACjC,SAACD,EAAK2I,GAAN,OAAY3I,EAAIM,IAAIqI,EAAE+B,WAAY/B,EAAEgC,sBACpC,IAAIpK,KAGAT,EAAsBuK,EAAgBrK,IAAI,SAAAE,GAAW,IACjD0I,EAAmB1I,EAAnB0I,MAAOgC,EAAY1K,EAAZ0K,QACTC,EAAgBjC,IAAgBgC,GAAoBlB,IAEpDrB,EAAW,WACf,IAAMA,EAAUmC,EAAWnK,IAAIH,EAAQ4K,YACvC,GAAIzC,EACF,OAAOA,EAEP,QAAA5G,OAASvB,EAAQ8D,GAAjB,oCALa,GAQX+G,EAAcN,EAAcpK,IAAIH,EAAQ8D,IACxCgH,EAAsBD,GAA4BrB,GAElDhC,EAAOF,GAAWa,EAAQ4C,oBAMhC,OAAOrK,OAAAsK,EAAA,EAAAtK,CAAA,CACLiI,OALa,GAMbgC,gBACAxC,UACAX,OACAyD,OARuB,GASvBC,aARmB,GASnBJ,uBACG9K,KAIPJ,EAASyD,KAAK,SAACtB,EAAGuB,GAChB,OAAIvB,EAAEoG,QAAQ4C,oBAAsBzH,EAAE6E,QAAQ4C,mBACrCzH,EAAEa,MAAMgH,cAAcpJ,EAAEoC,OAExBb,EAAE6E,QAAQ4C,mBAAqBhJ,EAAEoG,QAAQ4C,qBAIpD7H,EAAKa,SAAS,CAAEnE,YAAY,kBAC1BsD,EAAKkI,eAAelI,EAAKT,MAAM4I,yDAKlBC,EAAkBC,GAC/BD,EAAUD,WAAazI,KAAKH,MAAM4I,UACpCzI,KAAKwI,eAAexI,KAAKH,MAAM4I,iDAIpBA,GAAoB,IAAAG,EAAA5I,KACjC,OAAOoH,QAAQC,IAAIoB,EAASvL,IAAIoK,IAC7B/G,KAAK,SAAAvB,GAAC,OAAIA,EAAE6J,SACZtI,KAAK,SAAAuI,GACJ,IAAMC,EAAiBD,EACpBrI,KAAK,SAACtB,EAAGuB,GAAJ,OAAUvB,EAAEwF,aAAejE,EAAEiE,eAClCxH,OAAO,SAACD,EAAK8L,GACZ,IAAMjF,EAAM7G,EAAIK,IAAIyL,EAAWpB,YAM/B,OALI7D,EACFA,EAAI/C,KAAKgI,GAET9L,EAAIM,IAAIwL,EAAWpB,WAAY,CAACoB,IAE3B9L,GACN,IAAIO,KAEHiB,EAAO+J,EAAStG,OAAS,EAAIsG,EAAS,GAAK,GAC3CJ,EAASO,EAAK/I,MAAM4I,SAAS7J,MAAM,GAEnC5B,EAAW4L,EAAKxI,MAAMpD,SAASE,IAAI,SAAAE,GACvC,IAAM0L,EAAe,WACnB,IAAMG,EAAIF,EAAexL,IAAIH,EAAQ8D,IACrC,OAAO+H,GAAQ,GAFI,GAKfC,EAAc,WAClB,IAAMC,EAAOL,EAAYM,OAAO,SAAAH,GAAC,OAAIA,EAAE5L,UAAYqB,IACnD,OAAIyK,EAAKE,KAAK,SAAAJ,GAAC,OAAI5E,GAAW4E,EAAE3E,UACvB,KACE6E,EAAKhH,OAAS,EAChBgH,EAAKA,EAAKhH,OAAS,GAAGmC,OAEtB,GAPS,GAWdgF,EACJR,EACGM,OAAO,SAAAH,GAAC,OAAIZ,EAAOkB,SAASN,EAAE5L,WAC9B+L,OAAO,SAAAH,GAAC,OAAI5E,GAAW4E,EAAE3E,UACzBnH,OACC,SAACK,EAAKwL,GAAN,OAAqBxL,EAAIgM,IAAIR,EAAW3L,UACxC,IAAIoM,KAEJC,EAAahM,MAAMC,KAAK2L,GAAgB7I,OACxCkJ,EAAe,WACnB,IAAIV,EAAIH,EACLM,OAAO,SAAAH,GAAC,OAAIA,EAAE5L,UAAYqB,IAC1B0K,OAAO,SAAAH,GAAC,OAAI5E,GAAW4E,EAAE3E,UACzBsF,UACH,OAAIX,EAAE9G,OAAS,EACNuC,GAAWuE,EAAE,GAAGtE,cAEhB,GARU,GAWrB,GACEuE,IAAe9L,EAAQ2I,QACvB2D,IAAetM,EAAQiL,QACvBsB,IAAgBvM,EAAQkL,aACxB,CACA,IAAMuB,EAAc/L,OAAOgM,OAAO,GAAI1M,GAItC,OAHAyM,EAAYxB,OAASqB,EACrBG,EAAY9D,OAASmD,EACrBW,EAAYvB,aAAeqB,EACpBE,EAEP,OAAOzM,IAIXwL,EAAKzH,SAAS,CAAEnE,gDAIb,IAAA+M,EAAA/J,KACDgK,EAOA,CACJ,CACEC,OAAQ,OACR7H,UAAW,OACX8H,UAAU,GAEZ,CACED,OAAQ,UACR7H,UAAW,QACX8H,UAAU,EACVC,WAAY,SAACrJ,EAAW6B,GAAZ,OACVvB,EAAAjC,EAAAkC,cAAA,KACE+I,KAAMC,GAAqB1H,EAAIzB,GAAIyB,EAAIqF,YACvCsC,OAAO,UAEN3H,EAAIpB,SAIX,CACE0I,OAAQ,UACR7H,UAAW,aACX8H,UAAU,EACVC,WAAY,SAACnC,EAAoB5K,GAArB,OACVgE,EAAAjC,EAAAkC,cAAA,KAAG+I,KAAMC,GAAqBrC,GAAasC,OAAO,UAC/ClN,EAAQmI,QAAQhE,SAIvB,CACE0I,OAAQ,SACR7H,UAAW,KACXmI,UAAW,SACXJ,WAAY,SAACjJ,EAAY9D,GACvB,OAAIiH,GAAWjH,EAAQ2I,QACd3E,EAAAjC,EAAAkC,cAACmJ,EAAA,EAAD,CAAOC,MAAM,WAAb,MACErN,EAAQiL,OAAOlG,OAAS,EAE/Bf,EAAAjC,EAAAkC,cAAA,WACGjE,EAAQiL,OAAOnL,IAAI,SAAA8B,GAAC,OACnBoC,EAAAjC,EAAAkC,cAACmJ,EAAA,EAAD,CAAO/G,IAAKzE,EAAGyL,MAAM,UAClBzL,MAMFoC,EAAAjC,EAAAkC,cAACmJ,EAAA,EAAD,CAAOC,MAAM,WAAWrN,EAAQ2I,UAI7C,CACEkE,OAAQ,eACR7H,UAAW,eACX8H,UAAU,GAEZ,CACED,OAAQ,UACR7H,UAAW,eACX8H,UAAU,EACVC,WAAY,SAACO,EAAqB/H,GAAtB,OACVvB,EAAAjC,EAAAkC,cAAA,KACE+I,MDnRqB7E,ECmRM5C,EAAIqF,WDnRO5K,ECmRKuF,EAAIzB,GDnR3B,GAAAvC,OAC5B2G,GAAiBC,GADW,wBAAA5G,OACoBvB,EADpB,iBCoRpBkN,OAAO,UAENI,GDtRmB,IAACnF,EAAiBnI,IC0R5C,CACE6M,OAAQ,QACR7H,UAAW,gBACX8H,UAAU,EACVC,WAAY,SAACO,GACX,OAAIA,GAAQ9D,GACHxF,EAAAjC,EAAAkC,cAAA,cAEHqJ,EAAO,KAAO,EACTtJ,EAAAjC,EAAAkC,cAAA,SAAIqJ,GAEJtJ,EAAAjC,EAAAkC,cAAA,SAAIqJ,EAAKC,QAAQ,MAKhC,CACEV,OAAQ,aACR7H,UAAW,sBACX8H,UAAU,EACVC,WAAY,SAACO,GACX,OAAIA,GAAQ9D,GACHxF,EAAAjC,EAAAkC,cAAA,cAEAD,EAAAjC,EAAAkC,cAAA,SAAIqJ,KAIjB,CACET,OAAQ,UACR7H,UAAW,iBACX8H,UAAU,EACVC,WAAY,SAACrJ,EAAW6B,GAAiB,IAErCiI,EAIEjI,EAJFiI,sBACAC,EAGElI,EAHFkI,mBACAC,EAEEnI,EAFFmI,gBACAC,EACEpI,EADFoI,eAEF,OAC2B,MAAzBH,GACsB,MAAtBC,GACmB,MAAnBC,GACkB,MAAlBC,EAGE3J,EAAAjC,EAAAkC,cAAA,KACE+I,KAAMC,GACJO,EACAC,GAEFP,OAAO,UAENQ,EAPH,KAOsBC,EAPtB,QAWK3J,EAAAjC,EAAAkC,cAAA,YAIb,CACE4I,OAAQ,WACR7H,UAAW,qBACX8H,UAAU,EACVC,WAAY,SAACrJ,EAAW6B,GAAiB,IAErCqI,EAIErI,EAJFqI,uBACAC,EAGEtI,EAHFsI,oBACAC,EAEEvI,EAFFuI,iBACAC,EACExI,EADFwI,mBAEF,OACyB,MAAvBF,GAC0B,MAA1BD,GACoB,MAApBE,GACsB,MAAtBC,EAGE/J,EAAAjC,EAAAkC,cAAA,KACE+I,KAAMC,GACJW,EACAC,GAEFX,OAAO,UAENY,EAPH,KAOuBC,EAPvB,WAWK/J,EAAAjC,EAAAkC,cAAA,YAIb,CACE4I,OAAQ,QACR7H,UAAW,gBACX8H,UAAU,EACVC,WAAY,SAACrJ,EAAW6B,GAAiB,IAC/ByI,EAAyDzI,EAAzDyI,oBAAqBC,EAAoC1I,EAApC0I,iBAAkBC,EAAkB3I,EAAlB2I,cAC/C,OACyB,MAAvBF,GACoB,MAApBC,GACiB,MAAjBC,EAGElK,EAAAjC,EAAAkC,cAAA,KACE+I,KAAMC,GACJe,EACAC,GAEFf,OAAO,UAENgB,GAIElK,EAAAjC,EAAAkC,cAAA,YAIb,CACE4I,OAAQ,2BACR7H,UAAW,mBACXmJ,QAAQ,GAEV,CACEtB,OAAQ,0BACR7H,UAAW,kBACXmJ,QAAQ,IAINC,EAAYxL,KAAKI,MAAMpD,SAASG,OAAO,SAACK,EAAKqI,GACjD,OAAIA,EAAEC,MACGtI,EAAIgM,IAAI3D,EAAEC,OAEVtI,GAER,IAAIiM,KACDgC,EAAS/N,MAAMC,KAAK6N,GAAW/K,KAAK,SAACtB,EAAGuB,GAAJ,OAAUvB,EAAIuB,IACxD,OACEU,EAAAjC,EAAAkC,cAAA,WACED,EAAAjC,EAAAkC,cAACC,EAAA,EAAD,CAAKgC,UAAU,sBACblC,EAAAjC,EAAAkC,cAAA,2BAEFD,EAAAjC,EAAAkC,cAACC,EAAA,EAAD,KACEF,EAAAjC,EAAAkC,cAACqK,GAAD,CACE1O,SAAUgD,KAAKI,MAAMpD,SACrBK,QAAS2C,KAAKH,MAAM4I,SAAS,MAIjCrH,EAAAjC,EAAAkC,cAACC,EAAA,EAAD,CAAKgC,UAAU,sBACblC,EAAAjC,EAAAkC,cAAA,2BAEFD,EAAAjC,EAAAkC,cAACC,EAAA,EAAD,KACEF,EAAAjC,EAAAkC,cAACsK,GAAAxM,EAAD,CAAamE,UAAU,QACrBlC,EAAAjC,EAAAkC,cAACuK,EAAA,EAAD,KACExK,EAAAjC,EAAAkC,cAACwK,EAAA,EAAD,CAAgBC,OAAK,GACM,GAAxB9L,KAAKI,MAAM2G,UAAiB,OAAS/G,KAAKI,MAAM2G,WAEnD3F,EAAAjC,EAAAkC,cAAC0K,EAAA,EAAD,KACGN,EAAOvO,IAAI,SAAA2I,GAAC,OACXzE,EAAAjC,EAAAkC,cAAC2K,EAAA,EAAD,CACEvI,IAAKoC,EACLoG,QAAS,kBAAMlC,EAAK5I,SAAS,CAAE4F,UAAWlB,MAEzCA,OAKTzE,EAAAjC,EAAAkC,cAACuK,EAAA,EAAD,KACExK,EAAAjC,EAAAkC,cAACwK,EAAA,EAAD,CAAgBC,OAAK,GAClB9L,KAAKI,MAAM4G,SAAWJ,GAAY,KAAO5G,KAAKI,MAAM4G,SAEvD5F,EAAAjC,EAAAkC,cAAC0K,EAAA,EAAD,KACGN,EAAOvO,IAAI,SAAA2I,GAAC,OACXzE,EAAAjC,EAAAkC,cAAC2K,EAAA,EAAD,CACEvI,IAAKoC,EACLoG,QAAS,kBAAMlC,EAAK5I,SAAS,CAAE6F,QAASnB,MAEvCA,QAMXzE,EAAAjC,EAAAkC,cAACsK,GAAAxM,EAAD,CAAamE,UAAU,QACrBlC,EAAAjC,EAAAkC,cAACuK,EAAA,EAAD,KACExK,EAAAjC,EAAAkC,cAACwK,EAAA,EAAD,CAAgBC,OAAK,GAClB9L,KAAKI,MAAM6G,mBAEd7F,EAAAjC,EAAAkC,cAAC0K,EAAA,EAAD,KACE3K,EAAAjC,EAAAkC,cAAC2K,EAAA,EAAD,CACEC,QAAS,kBACPlC,EAAK5I,SAAS,CAAE8F,kBAAmB7B,GAAkB8B,QAGtD9B,GAAkB8B,KAErB9F,EAAAjC,EAAAkC,cAAC2K,EAAA,EAAD,CACEC,QAAS,kBACPlC,EAAK5I,SAAS,CACZ8F,kBAAmB7B,GAAkB8G,WAIxC9G,GAAkB8G,QAErB9K,EAAAjC,EAAAkC,cAAC2K,EAAA,EAAD,CACEC,QAAS,kBACPlC,EAAK5I,SAAS,CACZ8F,kBAAmB7B,GAAkB+G,aAIxC/G,GAAkB+G,aAK3B/K,EAAAjC,EAAAkC,cAACsK,GAAAxM,EAAD,CAAamE,UAAU,QACrBlC,EAAAjC,EAAAkC,cAACuK,EAAA,EAAD,KACExK,EAAAjC,EAAAkC,cAACwK,EAAA,EAAD,CAAgBC,OAAK,GAClB9L,KAAKI,MAAM+G,kBAEd/F,EAAAjC,EAAAkC,cAAC0K,EAAA,EAAD,KACE3K,EAAAjC,EAAAkC,cAAC2K,EAAA,EAAD,CACEC,QAAS,kBACPlC,EAAK5I,SAAS,CAAEgG,iBAAkB9B,GAAiB6B,QAGpD7B,GAAiB6B,KAEpB9F,EAAAjC,EAAAkC,cAAC2K,EAAA,EAAD,CACEC,QAAS,kBACPlC,EAAK5I,SAAS,CAAEgG,iBAAkB9B,GAAiB+G,UAGpD/G,GAAiB+G,OAEpBhL,EAAAjC,EAAAkC,cAAC2K,EAAA,EAAD,CACEC,QAAS,kBACPlC,EAAK5I,SAAS,CACZgG,iBAAkB9B,GAAiBgH,YAItChH,GAAiBgH,aAM5BjL,EAAAjC,EAAAkC,cAACC,EAAA,EAAD,KACEF,EAAAjC,EAAAkC,cAACG,EAAA,eAAD,CACEE,YAAU,EACV4K,SAAS,KACT7K,OAAO,OACPG,OAAK,EACLD,SAAO,EACP4K,QAAM,EACNC,YAAa,SAACpP,GACZ,OAAIiH,GAAWjH,EAAQ2I,QACd,gBACE3I,EAAQiL,OAAOlG,OAAS,EAC1B,eACE/E,EAAQ2I,OAAO5D,OAAS,EAC1B,gBAEA,IAGX9B,KAAML,KAAKI,MAAMpD,SACdoM,OAAO,SAAApF,GAAwB,IAArB8B,EAAqB9B,EAArB8B,MAAOgC,EAAc9D,EAAd8D,QAChB,OAAIhC,EAEAiE,EAAK3J,MAAM2G,WAAajB,GAASA,GAASiE,EAAK3J,MAAM4G,QAE9Cc,EAEPiC,EAAK3J,MAAM2G,WAAae,GACxBA,GAAWiC,EAAK3J,MAAM4G,QAGjB+C,EAAK3J,MAAM4G,SAAWJ,KAGhCwC,OAAO,SAAAnF,GAAgB,IAAb8B,EAAa9B,EAAb8B,OACT,OAAQgE,EAAK3J,MAAM6G,mBACjB,KAAK7B,GAAkB8B,IACrB,OAAO,EACT,KAAK9B,GAAkB8G,OACrB,OAAQ7H,GAAW0B,GACrB,KAAKX,GAAkB+G,SACrB,OAAO9H,GAAW0B,MAGvBqD,OAAO,SAAAjD,GAAe,IAAZL,EAAYK,EAAZL,MACT,OAAQiE,EAAK3J,MAAM+G,kBACjB,KAAK9B,GAAiB6B,IACpB,OAAO,EACT,KAAK7B,GAAiB+G,MACpB,OAAOtG,GAAkB,MAATA,EAClB,KAAKT,GAAiBgH,QACpB,OAAQvG,KAGhBjE,QAAS,CACPC,mBAAoB,MACpBC,YAAa,GACbC,gBAAiB,CACf,CACEC,KAAM,KACNC,MAAO,IAET,CACED,KAAM,KACNC,MAAO,IAET,CACED,KAAM,MACNC,MAAO,KAET,CACED,KAAM,MACNC,MAAO,KAET,CACED,KAAM,MACNC,MAAOlC,KAAKI,MAAMpD,SAASmF,WAKhC6H,EAAQ9M,IAAI,SAAAuP,GAAC,OACZrL,EAAAjC,EAAAkC,cAACG,EAAA,kBAAD1D,OAAAgM,OAAA,CAAmBrG,IAAKgJ,EAAExC,QAAYwC,GACnCA,EAAExC,oBA3jBI3H,IAAMC,oBG1BdmK,GA1BW,SAAA9O,GAAA,IAAG+O,EAAH/O,EAAG+O,cAAH,OACzBvL,EAAAjC,EAAAkC,cAACC,EAAA,EAAD,CAAKgC,UAAU,QACdlC,EAAAjC,EAAAkC,cAACuL,GAAA,EAAD,CAAqBC,MAAM,OAAOpL,OAAQ,KACzCL,EAAAjC,EAAAkC,cAACuL,GAAA,EAAD,CACCvM,KAAMsM,EACNG,OAAQ,CACPC,IAAK,EACLC,MAAO,GACPC,KAAM,GACNC,OAAQ,IAGT9L,EAAAjC,EAAAkC,cAACuL,GAAA,EAAD,CAAeO,gBAAgB,QAC/B/L,EAAAjC,EAAAkC,cAACuL,GAAA,EAAD,CACCQ,QAAQ,OACRC,KAAK,SACLC,OAAQ,CAAE,UAAW,WACrBC,cAAe,SAACC,GAAD,OAAgB9I,GAAW8I,EAAK,QAEhDpM,EAAAjC,EAAAkC,cAACuL,GAAA,EAAD,MACAxL,EAAAjC,EAAAkC,cAACuL,GAAA,EAAD,CAASa,eAAgB,SAACC,GAAD,OAAYhJ,GAAWgJ,EAAI,QACpDtM,EAAAjC,EAAAkC,cAACuL,GAAA,EAAD,CAAMQ,QAAQ,QAAQO,OAAO,gBCkBlBC,GA/Ba,SAAAhQ,GAAA,IAC1BiQ,EAD0BjQ,EAC1BiQ,WAD0B,OAK1BzM,EAAAjC,EAAAkC,cAACC,EAAA,EAAD,CAAKgC,UAAU,QACblC,EAAAjC,EAAAkC,cAACuL,GAAA,EAAD,CAAqBC,MAAM,OAAOpL,OAAQ,KACxCL,EAAAjC,EAAAkC,cAACuL,GAAA,EAAD,CACEvM,KAAMwN,EACNf,OAAQ,CACNC,IAAK,EACLC,MAAO,GACPC,KAAM,GACNC,OAAQ,IAGV9L,EAAAjC,EAAAkC,cAACuL,GAAA,EAAD,CAAeO,gBAAgB,QAC/B/L,EAAAjC,EAAAkC,cAACuL,GAAA,EAAD,CACEQ,QAAQ,OACRC,KAAK,SACLC,OAAQ,CAAC,UAAW,WACpBC,cAAe,SAACC,GAAD,OAAgB9I,GAAW8I,EAAK,QAEjDpM,EAAAjC,EAAAkC,cAACuL,GAAA,EAAD,MACAxL,EAAAjC,EAAAkC,cAACuL,GAAA,EAAD,CAASa,eAAgB,SAACC,GAAD,OAAYhJ,GAAWgJ,EAAI,QACpDtM,EAAAjC,EAAAkC,cAACuL,GAAA,EAAD,CAAKQ,QAAQ,QAAQU,KAAK,gBC7B5BC,GACM,UADNA,GAEI,UAmCKC,GAhCO,SAAApQ,GAQhB,IAPJ2D,EAOI3D,EAPJ2D,MACA0M,EAMIrQ,EANJqQ,OACAC,EAKItQ,EALJsQ,SAMM7N,EAAO,CACX,CAAE6B,MAAOgM,EAAUzD,MAAOsD,GAAiBxK,KAAM,YACjD,CAAErB,MAAO+L,EAAQxD,MAAOsD,GAAexK,KAAM,WAE/C,OACEnC,EAAAjC,EAAAkC,cAAA,WACED,EAAAjC,EAAAkC,cAACuL,GAAA,EAAD,CAAqBC,MAAM,OAAOpL,OAAQ,KACxCL,EAAAjC,EAAAkC,cAACuL,GAAA,EAAD,KACExL,EAAAjC,EAAAkC,cAACuL,GAAA,EAAD,CAAKQ,QAAQ,QAAQ/M,KAAMA,EAAM8N,YAAY,MAAML,KAAK,WACrDzN,EAAKnD,IAAI,SAAC4G,EAAG/C,GAAJ,OACRK,EAAAjC,EAAAkC,cAACuL,GAAA,EAAD,CAAMnJ,IAAKK,EAAEP,KAAMuK,KAAMhK,EAAE2G,WAG/BrJ,EAAAjC,EAAAkC,cAACuL,GAAA,EAAD,MACAxL,EAAAjC,EAAAkC,cAACuL,GAAA,EAAD,QAGJxL,EAAAjC,EAAAkC,cAAA,UAAKE,GACLH,EAAAjC,EAAAkC,cAAA,MAAIiC,UAAU,cAAd,GAAA3E,OAA+BuP,EAA/B,OAAAvP,OAA6CuP,EAAWD,oCCrCxDF,GAAS,CAAC,UAAW,UAAW,UAAW,UAAW,WAEtDrJ,GAAa,SAACE,GAClB,IAAME,EAAOF,EAAKG,cACZC,EAAQJ,EAAKK,WAAa,EAC1BC,EAAMN,EAAKO,UAGjB,OAAOL,EAAO,KAFIE,EAAQ,GAAK,IAAMA,EAAQA,GAEb,KADhBE,EAAM,GAAK,IAAMA,EAAMA,IA6D1BkJ,GAzDS,SAACvO,GACvB,IAAMwO,EAAc,IAAIxJ,KACxBwJ,EAAYC,QAAQD,EAAYlJ,WAflB,EAeyCkJ,EAAYE,WAEnE,IAAMC,EAAe,IAAI3J,KAAKwJ,GAC9BG,EAAaF,QAAQE,EAAarJ,UAAYsJ,KAG9C,IADA,IAAMC,EAAY,IAAIjR,IACfiH,GAAW8J,KAAkB9J,GAAW2J,IAC7CK,EAAUlR,IAAIkH,GAAW8J,GAAe,GACxCA,EAAaF,QAAQE,EAAarJ,UAAY,GAGhDtF,EAAMQ,KAAKQ,QAAQ,SAAC+D,GAClB,IAAMtH,EAAQoR,EAAUnR,IAAImH,GAAWE,SACzB+B,IAAVrJ,GACFoR,EAAUlR,IAAIkH,GAAWE,GAAOtH,EAAQ,KAI5C,IAAMqR,EAAajR,MAAMC,KAAK+Q,GAC3BxR,IAAI,SAAAU,GAAA,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAF,EAAA,GAAEgH,EAAF/G,EAAA,SAAoB,CAAEP,MAAtBO,EAAA,GAA6B+G,UACjCnE,KAAK,SAACtB,EAAGuB,GAAJ,OAAUvB,EAAEyF,KAAK2D,cAAc7H,EAAEkE,QAKzC,OACExD,EAAAjC,EAAAkC,cAAA,OAAKuN,MAAO,CAAE/B,MAAO,SACnBzL,EAAAjC,EAAAkC,cAAA,OAAKwN,QAAO,OAAAlQ,OAJFmQ,IAIE,KAAAnQ,OAHDmQ,IAG6BF,MAAO,CAAE/B,MAAO,SACrD8B,EAAWzR,IAAI,SAAA8G,EAAkBjD,GAAM,IAArB6D,EAAqBZ,EAArBY,KAAMtH,EAAe0G,EAAf1G,MACjBmN,EAAQsD,GAAOgB,KAAKC,IAAI1R,EAAOyQ,GAAO5L,OAAS,IAC/C8M,EAAOF,KAAKG,MAAMnO,EA7ClB,GA8CAmE,EAAMnE,EA9CN,EA+CN,OACEK,EAAAjC,EAAAkC,cAAA,QACEoC,IAAKmB,EACL1D,GAAE,QAAAvC,OAAUiG,GACZuK,EAdQ,GAcLF,EACHG,EAfQ,GAeLlK,EACH2H,MAhBQ,GAiBRpL,OAjBQ,GAkBRqM,KAAMrD,OAMbkE,EAAWzR,IAAI,SAAA+G,GAAA,IAAGW,EAAHX,EAAGW,KAAMtH,EAAT2G,EAAS3G,MAAT,OACd8D,EAAAjC,EAAAkC,cAACgO,GAAA,EAAD,CAAqBC,MAAO,CAAEC,KAAM,EAAGC,KAAM,GAAK/L,IAAKmB,EAAM6K,UAAU,QAAQnF,OAAM,QAAA3L,OAAUiG,IAC5F/E,EAAM6P,cAAgB7P,EAAM6P,cAAc9K,EAAMtH,GAAhD,GAAAqB,OAA4DiG,EAA5D,MAAAjG,OAAqErB,kBJ3D3EuJ,oIKGA8I,GLkFUC,eAtEd,SAAAA,EAAY/P,GAAc,IAAAC,EAAA,OAAAhC,OAAAiC,EAAA,EAAAjC,CAAAkC,KAAA4P,IACzB9P,EAAAhC,OAAAmC,EAAA,EAAAnC,CAAAkC,KAAAlC,OAAAoC,EAAA,EAAApC,CAAA8R,GAAAzP,KAAAH,KAAMH,KACDO,MAAQ,CACZyP,cAAehJ,GAAaiJ,gBAHJhQ,wEAOjB,IAAAQ,EAAAN,KACF+P,EAAwB,SAACF,GAC9B,OAAQA,GACP,KAAKhJ,GAAaiJ,eACjB,OAAOxP,EAAKT,MAAMiJ,YACnB,KAAKjC,GAAamJ,YACjB,OAAO1P,EAAKT,MAAMiJ,YAAYM,OAAO,SAACH,GAAD,OAAO5E,GAAW4E,EAAE3E,UAC1D,KAAKuC,GAAaoJ,eACjB,IAAM/S,EAAMoD,EAAKT,MAAMiJ,YACrBM,OAAO,SAACH,GAAD,OAAO5E,GAAW4E,EAAE3E,UAC3B7D,KAAK,SAACtB,EAAGuB,GAAJ,OAAUA,EAAEiE,aAAexF,EAAEwF,eAClCxH,OAAO,SAACD,EAAK+L,GAAN,OAAY/L,EAAIM,IAAIyL,EAAErB,WAAYqB,IAAI,IAAIxL,KACnD,OAAOC,MAAMC,KAAKT,EAAIgT,UACvB,QACC,KAAM,eAbqB,CAe3BlQ,KAAKI,MAAMyP,eAEd,OACCzO,EAAAjC,EAAAkC,cAAA,WACCD,EAAAjC,EAAAkC,cAACC,EAAA,EAAD,CAAKgC,UAAU,QACdlC,EAAAjC,EAAAkC,cAAC8O,GAAA,EAAD,KACC/O,EAAAjC,EAAAkC,cAAC+O,GAAA,EAAD,CACCnE,QAAS,kBAAM3L,EAAKa,SAAS,CAAE0O,cAAehJ,GAAaiJ,kBAC3DO,OAAQrQ,KAAKI,MAAMyP,gBAAkBhJ,GAAaiJ,gBAFnD,mBAMA1O,EAAAjC,EAAAkC,cAAC+O,GAAA,EAAD,CACCnE,QAAS,kBAAM3L,EAAKa,SAAS,CAAE0O,cAAehJ,GAAamJ,eAC3DK,OAAQrQ,KAAKI,MAAMyP,gBAAkBhJ,GAAamJ,aAFnD,UAMA5O,EAAAjC,EAAAkC,cAAC+O,GAAA,EAAD,CACCnE,QAAS,kBAAM3L,EAAKa,SAAS,CAAE0O,cAAehJ,GAAaoJ,kBAC3DI,OAAQrQ,KAAKI,MAAMyP,gBAAkBhJ,GAAaoJ,gBAFnD,eAQF7O,EAAAjC,EAAAkC,cAACC,EAAA,EAAD,CAAKgC,UAAU,QACdlC,EAAAjC,EAAAkC,cAACiP,GAAD,CACCjQ,KAAM0P,EAAqB7S,IAAI,SAAC+L,GAAD,OAAO,IAAIpE,KAAsB,IAAjBoE,EAAEtE,gBACjD+K,cAAe,SAAC9K,EAActH,GAC7B,IAAIiT,EAAO,GAQX,OANCA,EADGjQ,EAAKF,MAAMyP,gBAAkBhJ,GAAamJ,YACtC,KACG1P,EAAKF,MAAMyP,eAAiBhJ,GAAaiJ,eAC5C,cAEA,YAER,GAAAnR,OAAUiG,EAAV,KAAAjG,OAAkBrB,EAAlB,KAAAqB,OAA2B4R,eA9DHjO,IAAMC,WMoGtBiO,GAhHQ,SAAA5S,GAMjB,IALJkL,EAKIlL,EALJkL,YAMM2H,EADF7S,EAJJZ,SAK2BG,OACzB,SAACD,EAAK2I,GAAN,OAAY3I,EAAIM,IAAIqI,EAAE3E,GAAI2E,EAAEtE,QAC5B,IAAI9D,KAGFiT,EAAsB,GAM1B,OALA5H,EACG3L,OAAO,SAACK,EAAKyL,GAAN,OAAYzL,EAAIgM,IAAIP,EAAE3E,SAAS,IAAImF,KAC1C5I,QAAQ,SAAC8P,EAASC,GACjBF,EAAeE,GAASD,IAG1BvP,EAAAjC,EAAAkC,cAACG,EAAA,eAAD,CACEnB,KAAMyI,EACHrI,KAAK,SAACtB,EAAGuB,GAAJ,OAAUA,EAAEiE,aAAexF,EAAEwF,eAClCzH,IAAI,SAAA+L,GAAC,OAAAnL,OAAAsK,EAAA,EAAAtK,CAAA,CAAOyD,MAAOkP,EAAUlT,IAAI0L,EAAErB,aAAgBqB,KACtDqD,SAAS,KACT7K,OAAO,OACPG,OAAK,EACLD,SAAO,EACP4K,QAAM,EACN7K,YAAU,EACVG,QAAS,CACPC,mBAAoB,MACpBC,YAAa,GACbC,gBAAiB,CACf,CACEC,KAAM,KACNC,MAAO,IAET,CACED,KAAM,KACNC,MAAO,IAET,CACED,KAAM,MACNC,MAAO,KAET,CACED,KAAM,MACNC,MAAO,KAET,CACED,KAAM,MACNC,MAAO4G,EAAY3G,WAKzBf,EAAAjC,EAAAkC,cAACG,EAAA,kBAAD,CACE0I,UAAQ,EACR9H,UAAU,eACV+H,WAAY,SAAC0G,GAAD,OAAoBnM,GAAWmM,KAH7C,QAOAzP,EAAAjC,EAAAkC,cAACG,EAAA,kBAAD,CACEsP,iBAAe,EACf5G,UAAQ,EACR9H,UAAU,aACV+H,WAAY,SAACrJ,EAADjD,GAAA,IAAc+J,EAAd/J,EAAc+J,WAAYI,EAA1BnK,EAA0BmK,WAA1B,OACV5G,EAAAjC,EAAAkC,cAAA,KACEiJ,OAAO,SACPF,KAAMC,GAAqBzC,EAAYI,IAEtCyI,EAAUlT,IAAIqK,MATrB,WAeAxG,EAAAjC,EAAAkC,cAACG,EAAA,kBAAD,CACE0I,UAAQ,EACRd,OAAQ,CAAEiE,KAAM,eAAgBxL,QAAS6O,GACzCtO,UAAU,SACVmI,UAAU,SACVJ,WAAY,SAAA7F,GAAM,OAChBD,GAAWC,GACTlD,EAAAjC,EAAAkC,cAACmJ,EAAA,EAAD,CAAOC,MAAM,WAAWnG,GAExBlD,EAAAjC,EAAAkC,cAACmJ,EAAA,EAAD,CAAOC,MAAM,WAAWnG,KAT9B,UAeAlD,EAAAjC,EAAAkC,cAACG,EAAA,kBAAD,CAAmB0I,UAAQ,EAAC9H,UAAU,YAAtC,YAGAhB,EAAAjC,EAAAkC,cAACG,EAAA,kBAAD,CACE0I,UAAQ,EACR9H,UAAU,KACV+H,WAAY,SAACrJ,EAADkD,GAAA,IAAc9C,EAAd8C,EAAc9C,GAAI8G,EAAlBhE,EAAkBgE,WAAlB,OACV5G,EAAAjC,EAAAkC,cAAA,KAAGiJ,OAAO,SAASF,KAAMC,GAAwBnJ,EAAI8G,IAArD,YAJJ,UAWA5G,EAAAjC,EAAAkC,cAACG,EAAA,kBAAD,CAAmBY,UAAU,QAAQmJ,QAAM,MCrFlCwF,GA1BO,SAAAnT,GAAoD,IAClEoT,EADkEpT,EAAjDkL,YACUM,OAAO,SAACH,GAAD,OAAO5E,GAAW4E,EAAE3E,UAASnH,OAAO,SAACD,EAAK8L,GAChF,IAAM5F,EAAW4F,EAAW5F,SAAS6N,QAAQ,cAAe,IACtDjU,EAAWE,EAAIK,IAAI6F,GAMzB,OALIpG,EACFA,EAASwM,IAAIR,EAAWpB,YAExB1K,EAAIM,IAAI4F,EAAU,IAAIqG,IAAI,CAACT,EAAWpB,cAEjC1K,GACN,IAAIO,KACDyT,EAAiBxT,MAAMC,KAAKqT,GAC/B9T,IAAI,SAAAW,GAAA,IAAAmG,EAAAlG,OAAAC,EAAA,EAAAD,CAAAD,EAAA,SAAsB,CAAEuF,SAAxBY,EAAA,GAAkC1G,MAAlC0G,EAAA,GAA6CmN,QACjD1Q,KAAK,SAACtB,EAAGuB,GAAJ,OAAUvB,EAAEiE,SAASmF,cAAc7H,EAAE0C,YAC7C,OACEhC,EAAAjC,EAAAkC,cAACC,EAAA,EAAD,KACG4P,EAAehU,IAAI,SAAA+G,GAAA,IAAGb,EAAHa,EAAGb,SAAU9F,EAAb2G,EAAa3G,MAAb,OAClB8D,EAAAjC,EAAAkC,cAACmC,EAAA,EAAD,CAAKC,IAAKL,EAAUE,UAAU,mBAAmB8N,GAAG,IAAIC,GAAG,KACzDjQ,EAAAjC,EAAAkC,cAAA,UAAK+B,GACLhC,EAAAjC,EAAAkC,cAAA,UAAK/D,QCyFAgU,GAvGS,SAAA1T,GAUlB,IATJkL,EASIlL,EATJkL,YACA9L,EAQIY,EARJZ,SACAwK,EAOI5J,EAPJ4J,SACAC,EAMI7J,EANJ6J,aAOA,GAA0B,GAAtBqB,EAAY3G,OACd,OAAO,KAET,IAAMoP,EAAkB9J,EAAatK,OACnC,SAACD,EAADW,GAAA,IAAQ+J,EAAR/J,EAAQ+J,WAAYC,EAApBhK,EAAoBgK,oBAApB,OACE3K,EAAIM,IAAIoK,EAAYC,IACtB,IAAIpK,KAGA+T,EAAchK,EAASrK,OAC3B,SAACD,EAAKqI,GAAN,OAAkBrI,EAAIM,IAAI+H,EAAQrE,GAAIqE,IACtC,IAAI9H,KAGAgU,EAAuB3I,EAC1BM,OAAO,SAAApF,GAAA,IAAGM,EAAHN,EAAGM,OAAH,OAAgBD,GAAWC,KAClC7D,KAAK,SAACtB,EAAGuB,GAAJ,OAAUA,EAAEiE,aAAexF,EAAEwF,eAClCzH,IAAI,SAAA+L,GAAC,OAAIA,EAAErB,aACR8J,EAA0B,IAAIjI,IAAIgI,GAClCE,EAAgCjU,MAAMC,KAAK+T,GAC9CxU,IAAI,SAAAgE,GAAE,OAAIqQ,EAAgBhU,IAAI2D,KAC9BkI,OAAO,SAAAvD,GAAC,YAAUc,IAANd,IACf8L,EAA8BlR,KAAK,SAACtB,EAAGuB,GAAJ,OAAUA,EAAIvB,IACjD,IAKMyS,EAAwBD,EAJ5B5C,KAAKC,IACHD,KAAK8C,KAAKF,EAA8BxP,OAAS,GAvC9B,IAyCjB,GAGN2P,QAAQC,IAAIJ,GACZG,QAAQC,IAAIH,GAEZ,IAAMI,EAAuBhV,EAC1BoM,OAAO,SAAAnF,GAAA,IAAG/C,EAAH+C,EAAG/C,GAAH,OAAawQ,EAAwBO,IAAI/Q,KAChDkI,OAAO,SAAAjD,GAAA,IAAGjF,EAAHiF,EAAGjF,GAAH,OAAYqQ,EAAgBU,IAAI/Q,KACvCT,KAAK,SAACtB,EAAGuB,GACR,IAAMwR,EAAKX,EAAgBhU,IAAI4B,EAAE+B,IAC3BiR,EAAKZ,EAAgBhU,IAAImD,EAAEQ,IAGjC,OAFW6N,KAAKqD,IAAIF,EAAKN,GACd7C,KAAKqD,IAAID,EAAKP,KAG1BhT,MAAM,EAxDW,IAyDjB1B,IAAI,SAAA2I,GAAC,OAAI/H,OAAOgM,OAAO,CACtBuI,WAAYd,EAAgBhU,IAAIsI,EAAE3E,IAClCqE,QAASiM,EAAYjU,IAAIsI,EAAEmC,aAC1BnC,KACFpF,KAAK,SAACtB,EAAGuB,GAAJ,OAAUA,EAAE2R,WAAalT,EAAEkT,aAEnC,OACEjR,EAAAjC,EAAAkC,cAACG,EAAA,eAAD,CACEnB,KAAM2R,EACN1F,SAAS,KACT7K,OAAO,OACPG,OAAK,EACLD,SAAO,GAEPP,EAAAjC,EAAAkC,cAACG,EAAA,kBAAD,CACEY,UAAU,QACV+H,WAAY,SACV5I,EADUgF,GAAA,IAERrF,EAFQqF,EAERrF,GAAI8G,EAFIzB,EAEJyB,WAFI,OAIV5G,EAAAjC,EAAAkC,cAAA,KAAGiJ,OAAO,SAASF,KAAMC,GAAqBnJ,EAAI8G,IAC/CzG,KAPP,WAaAH,EAAAjC,EAAAkC,cAACG,EAAA,kBAAD,CACEY,UAAU,UACV+H,WAAY,SAAA3D,GAAA,IACTtF,EADSsF,EACTtF,GAAIK,EADKiF,EACLjF,MADK,OAGVH,EAAAjC,EAAAkC,cAAA,KAAG+I,KAAMC,GAAqBnJ,GAAKoJ,OAAO,UACvC/I,KANP,WAYAH,EAAAjC,EAAAkC,cAACG,EAAA,kBAAD,CACEY,UAAU,cADZ,gBCxDAkQ,eACJ,SAAAA,EAAYzS,GAAc,IAAAC,EAAA,OAAAhC,OAAAiC,EAAA,EAAAjC,CAAAkC,KAAAsS,IACxBxS,EAAAhC,OAAAmC,EAAA,EAAAnC,CAAAkC,KAAAlC,OAAAoC,EAAA,EAAApC,CAAAwU,GAAAnS,KAAAH,KAAMH,KACDO,MAAQ,CACXmS,cAAe,GACfC,aAAc,GACdC,cAAe,GAEfzV,SAAU,GACV8L,YAAa,GACb4J,UAAW,CACTC,eAAgB,IAAM,EACtBC,oBAAqB,IAAM,EAC3BC,gBAAiB,IAAM,EACvBC,qBAAsB,IAAM,EAC5BzV,QAAS,IAEXmK,SAAU,GAEVuL,qBAAsB,GAEtBC,eAAgB,IAAM,EACtBC,eAAgB,IAAM,EACtBC,QAAS,GAETrF,WAAY,GACZsF,MAAO,IAzBerT,mFA6BN,IAAAQ,EAAAN,KAClBoH,QAAQC,IAAI,CACVC,IACAA,IACAA,IACAA,MACC/G,KAAK,SAAA3C,GAAuD,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAF,EAAA,GAArDZ,EAAqDa,EAAA,GAA3CsV,EAA2CtV,EAAA,GAApCkV,EAAoClV,EAAA,GAAd2J,EAAc3J,EAAA,GACvD2U,EAAelL,EAAmBtK,GAAUyD,KAChD,SAACtB,EAAGuB,GAAJ,OAAUA,EAAE1C,cAAgBmB,EAAEnB,gBAE1ByU,EAAgBnL,EAAoBtK,GAAUyD,KAClD,SAACtB,EAAGuB,GAAJ,OAAUA,EAAE1C,cAAgBmB,EAAEnB,gBAE1BuU,EAAgBjL,EAAoBtK,GAAUyD,KAClD,SAACtB,EAAGuB,GAAJ,OAAUA,EAAE1C,cAAgBmB,EAAEnB,gBAEhCsC,EAAKa,SAAS,CACZqR,eACAD,gBACAE,gBACAzV,WACAmW,QACAJ,uBACAvL,eAGJxH,KAAKoT,YAAYpT,KAAKqT,iEAGL3K,GACb1I,KAAKH,QAAU6I,GACjB1I,KAAKoT,YAAYpT,KAAKqT,0DAIdhW,GAAiB,ItB5BDqB,EsB4BCkK,EAAA5I,KAC3BsH,EAAqBjK,GAASkD,KAAK,SAAAuI,GACjC,IAAMwK,EAAexK,EAClBM,OAAO,SAAAH,GAAC,OAAI5E,GAAW4E,EAAE3E,UACzB7D,KAAK,SAACtB,EAAGuB,GAAJ,OAAUA,EAAEiE,aAAexF,EAAEwF,eAClCxH,OACC,SAACD,EAAK+L,GAAN,OAAY/L,EAAIM,IAAIyL,EAAErB,WAAYqB,EAAEtE,eACpC,IAAIlH,KANwC8V,EAQIC,GAClDF,GADML,EARwCM,EAQxCN,eAAgBD,EARwBO,EAQxBP,eAAgBE,EARQK,EAQRL,QAGlCO,EAAiB/V,MAAMC,KAAK2V,GAAcnW,OAC9C,SAACD,EAAD8G,GAA+B,IAAAC,EAAAnG,OAAAC,EAAA,EAAAD,CAAAkG,EAAA,GACvBY,GADuBX,EAAA,GAChBS,GADgBT,EAAA,KAEvB3G,EAAQJ,EAAIK,IAAIqH,GACtB,OAAItH,EACKJ,EAAIM,IAAIoH,EAAMtH,EAAQ,GAEtBJ,EAAIM,IAAIoH,EAAM,IAGzB,IAAInH,KAEAoQ,EAAanQ,MAAMC,KAAK8V,GAC3BvW,IAAI,SAAAiJ,GAAA,IAAAI,EAAAzI,OAAAC,EAAA,EAAAD,CAAAqI,EAAA,GAAEvB,EAAF2B,EAAA,GAAQjJ,EAARiJ,EAAA,SAAoB,CAAE3B,KAAM,IAAIC,KAAKD,GAAM8O,UAAWpW,WAC1DmD,KAAK,SAACtB,EAAGuB,GAAJ,OAAUvB,EAAEyF,KAAOlE,EAAEkE,OAC7BgE,EAAKzH,SAAS,CACZ2H,cACAmK,iBACAD,iBACAE,UACArF,kBtB5DsBnP,EsB+DRrB,EtB9DpBgB,EAAS,GAAAM,OA7EkB9B,2CA6ElB,uBAAA8B,OAAwDD,KsB8DpC6B,KAAK,SAAAmS,GAAS,OAAI9J,EAAKzH,SAAS,CAAEuR,6DAI7D,OAAO1S,KAAKH,MAAM4I,SAAStG,OAAS,EAAInC,KAAKH,MAAM4I,SAAS,GAAK,oCAIjE,IAAMpL,EAAU2C,KAAKqT,qBADdM,EAYH3T,KAAKI,MATP0I,EAHK6K,EAGL7K,YACA4J,EAJKiB,EAILjB,UACAO,EALKU,EAKLV,eACAD,EANKW,EAMLX,eACAE,EAPKS,EAOLT,QACAlW,EARK2W,EAQL3W,SACAmW,EATKQ,EASLR,MACAJ,EAVKY,EAULZ,qBACAvL,EAXKmM,EAWLnM,SAEF,GAAsB,GAAlBnK,EAAQ8E,QAAqC,GAAtB2G,EAAY3G,OACrC,OAAO,KAGT,IAAMyR,EAAgBC,GAASxW,EAAS2C,KAAKI,MAAMqS,eAC7CqB,EAAeD,GAASxW,EAAS2C,KAAKI,MAAMoS,cAC5CuB,EAAaF,GAASxW,EAAS2C,KAAKI,MAAMmS,eAE1C5F,EAAgB3M,KAAKI,MAAMyN,WAAW3Q,IAAI,SAAA8W,GAAC,OAAIlW,OAAOgM,OAAO,GAAIkK,KACvErH,EAAc9L,QAAQ,SAACC,EAAGC,GACpBA,EAAI,IACN4L,EAAc5L,GAAGzD,OAASqP,EAAc5L,EAAI,GAAGzD,SAInD,IAAM2W,EAAiBnL,EAAYM,OACjC,SAAAH,GAAC,OAAIA,EAAE5L,UAAYA,GAAWgH,GAAW4E,EAAE3E,UAGvC4P,EAAaC,GAAY,aAAchB,EAAOc,GAC9CG,EAAaD,GAAY,aAAchB,EAAOc,GAC9CI,EAAaF,GAAY,aAAchB,EAAOc,GAE9CK,EAAe,CACnB,CACE7Q,IAAK,WACLvB,MAAOwQ,EAAUC,eACjBhS,KAAM+R,EAAUE,qBAElB,CACEnP,IAAK,gBACLvB,MAAO0R,EAActW,MACrBqD,KAAMiT,EAAcjT,MAEtB,CACE8C,IAAK,eACLvB,MAAO4R,EAAaxW,MACpBqD,KAAMmT,EAAanT,MAErB,CACE8C,IAAK,WACLvB,MAAO6R,EAAWzW,MAClBqD,KAAMoT,EAAWpT,OAIrB,OACES,EAAAjC,EAAAkC,cAAA,WACED,EAAAjC,EAAAkC,cAACC,EAAA,EAAD,CAAKgC,UAAU,sBACblC,EAAAjC,EAAAkC,cAAA,UAAKhE,IAEP+D,EAAAjC,EAAAkC,cAACC,EAAA,EAAD,CAAKgC,UAAU,QACZgR,EAAapX,IAAI,SAAAsJ,GAAA,IAAG/C,EAAH+C,EAAG/C,IAAKvB,EAARsE,EAAQtE,MAAOvB,EAAf6F,EAAe7F,KAAf,OAChBS,EAAAjC,EAAAkC,cAACmC,EAAA,EAAD,CAAKC,IAAKA,EAAKH,UAAU,cAAc+N,GAAG,IAAID,GAAG,KAC/ChQ,EAAAjC,EAAAkC,cAAA,UAAKoC,GACLrC,EAAAjC,EAAAkC,cAAA,UAAKa,GACLd,EAAAjC,EAAAkC,cAAA,MAAIiC,UAAU,cAAd,GAAA3E,OAA+BgC,EAAO,GAAtChC,OAA0C4F,GACxC5D,EAAO,QAIbS,EAAAjC,EAAAkC,cAACmC,EAAA,EAAD,CAAKC,IAAI,kBAAkBH,UAAU,cAAc+N,GAAG,IAAID,GAAG,KAC3DhQ,EAAAjC,EAAAkC,cAAA,6BACAD,EAAAjC,EAAAkC,cAAA,UAAKqR,EAAUG,gBAAf,OACAzR,EAAAjC,EAAAkC,cAAA,MAAIiC,UAAU,cAAd,GAAA3E,OAA+B+T,EAAUI,qBACvC,GADFnU,OACM4F,GAAgBmO,EAAUI,qBAAuB,MAEzD1R,EAAAjC,EAAAkC,cAACmC,EAAA,EAAD,CAAKC,IAAI,iBAAiBH,UAAU,cAAc+N,GAAG,IAAID,GAAG,KAC1DhQ,EAAAjC,EAAAkC,cAAA,4BACAD,EAAAjC,EAAAkC,cAAA,UAAK4R,EAAL,UAEF7R,EAAAjC,EAAAkC,cAACmC,EAAA,EAAD,CAAKC,IAAI,iBAAiBH,UAAU,cAAc+N,GAAG,IAAID,GAAG,KAC1DhQ,EAAAjC,EAAAkC,cAAA,4BACAD,EAAAjC,EAAAkC,cAAA,UAAK2R,EAAL,SACA5R,EAAAjC,EAAAkC,cAAA,MAAIiC,UAAU,cAAd,YAAA3E,OAAwCuU,KAE1C9R,EAAAjC,EAAAkC,cAACmC,EAAA,EAAD,OAGFpC,EAAAjC,EAAAkC,cAACkT,GAAD,CAAWvX,SAAUoX,EAAY7S,MAAM,6BACvCH,EAAAjC,EAAAkC,cAACkT,GAAD,CAAWvX,SAAUqX,EAAY9S,MAAM,4BACvCH,EAAAjC,EAAAkC,cAACkT,GAAD,CAAWvX,SAAUkX,EAAY3S,MAAM,0BAEvCH,EAAAjC,EAAAkC,cAACC,EAAA,EAAD,CAAKgC,UAAU,sBACblC,EAAAjC,EAAAkC,cAAA,2BAEFD,EAAAjC,EAAAkC,cAACmT,GAAD,CAAqB3G,WAAY7N,KAAKI,MAAMyN,aAE5CzM,EAAAjC,EAAAkC,cAACC,EAAA,EAAD,CAAKgC,UAAU,sBACblC,EAAAjC,EAAAkC,cAAA,uBAEFD,EAAAjC,EAAAkC,cAACoT,GAAD,CAAmB9H,cAAeA,IAElCvL,EAAAjC,EAAAkC,cAACC,EAAA,EAAD,CAAKgC,UAAU,sBACblC,EAAAjC,EAAAkC,cAAA,sBAEFD,EAAAjC,EAAAkC,cAACqT,GAAD,CACE5L,YAAaA,EAAYM,OAAO,SAAAH,GAAC,OAAIA,EAAE5L,UAAYA,MAGrD+D,EAAAjC,EAAAkC,cAACC,EAAA,EAAD,CAAKgC,UAAU,sBACblC,EAAAjC,EAAAkC,cAAA,0BAEFD,EAAAjC,EAAAkC,cAACsT,GAAD,CACE3X,SAAUA,EACV8L,YAAaA,EAAYM,OAAO,SAAAH,GAAC,OAAIA,EAAE5L,UAAYA,MAGrD+D,EAAAjC,EAAAkC,cAACC,EAAA,EAAD,CAAKgC,UAAU,sBACblC,EAAAjC,EAAAkC,cAAA,wBAEFD,EAAAjC,EAAAkC,cAACuT,GAAD,CACE9L,YAAaA,EAAYM,OAAO,SAAAH,GAAC,OAAIA,EAAE5L,UAAYA,MAGrD+D,EAAAjC,EAAAkC,cAACC,EAAA,EAAD,CAAKgC,UAAU,sBACblC,EAAAjC,EAAAkC,cAAA,8BAEFD,EAAAjC,EAAAkC,cAACwT,GAAD,CACE/L,YAAaA,EACb9L,SAAUA,EACVwK,SAAUA,EACVC,aAAcsL,YAlPDzQ,IAAMC,WAyPvBuS,GAAY,SAAArO,GAAA,IAChBzJ,EADgByJ,EAChBzJ,SACAuE,EAFgBkF,EAEhBlF,MAFgB,OAOhBH,EAAAjC,EAAAkC,cAAA,WACED,EAAAjC,EAAAkC,cAACC,EAAA,EAAD,CAAKgC,UAAU,sBACblC,EAAAjC,EAAAkC,cAAA,UAAKE,IAEPH,EAAAjC,EAAAkC,cAACC,EAAA,EAAD,CAAKgC,UAAU,QACZtG,EAASE,IAAI,SAAAwJ,EAAoB3F,GAAM,IAAvBgU,EAAuBrO,EAAvBqO,OAAQC,EAAetO,EAAfsO,MACjBvR,EAAM,SAASwR,OAAOlU,GAC5B,OACEK,EAAAjC,EAAAkC,cAACmC,EAAA,EAAD,CACEC,IAAKA,EACLH,UAAU,cACV+N,GAAG,IACHD,GAAI,GAAKpU,EAASmF,QAElBf,EAAAjC,EAAAkC,cAAC6T,GAAD,CACEhH,SAAU6G,EACV9G,OAAQ+G,EAAQD,EAChBxT,MAAK,WAAA5C,OAAa8E,WAS1B+P,GAAa,SAACF,GAMlB,IALA,IAAIL,EAAiB,EACjBD,EAAiB,EACfmC,EAAUzX,MAAMC,KAAK2V,GACxBpW,IAAI,SAAAkY,GAAA,IAAAC,EAAAvX,OAAAC,EAAA,EAAAD,CAAAsX,EAAA,GAAAC,EAAA,UAAAA,EAAA,KACJ5U,OACMmQ,EAAQ,EAAGA,EAAQuE,EAAQhT,OAAQyO,IAAS,CACnD,IAAM0E,EAAUH,EAAQvE,EAAQ,GAC1B2E,EAAUJ,EAAQvE,GACpBlM,GAAW6Q,KAAa7Q,GAAW4Q,KAGnC5Q,GAAW6Q,KAAa7Q,GAAW4Q,EAAU,OAC/CtC,GAAkB,GAElBC,EAAiBlE,KAAKyG,IAAIvC,EAAgBD,GAC1CA,EAAiB,IAGrBC,EAAiBlE,KAAKyG,IAAIvC,EAAgBD,GAC1C,IAAMyC,GAAQ,IAAI5Q,MAAO6O,UAAY,IAC/BgC,EAAiBP,EAAQA,EAAQhT,OAAS,GAQhD,OALEuC,GAAW+Q,KAAW/Q,GAAWgR,IACjChR,GAAW+Q,KAAW/Q,GAAWgR,EAAiB,SAElD1C,EAAiB,GAEZ,CACLC,iBACAD,iBACAE,QAASxO,GAAWgR,KAIlB7B,GAAW,SAACxW,EAAiBgG,GACjC,IAAM1C,EAAO0C,EAAQ+F,OAAO,SAAAzI,GAAI,OAAIA,EAAKtD,SAAWA,IAAS,GAC7D,IAAKsD,EACH,MAAO,CAAErD,MAAO,EAAGqD,KAAM0C,EAAQlB,QAH0B,IAKrDnE,EAAkB2C,EAAlB3C,cACF4S,EAAQvN,EACXnG,IAAI,SAAAyY,EAAoB5U,GACvB,MAAO,CAAEzD,MADoBqY,EAAvB3X,cACyB+C,OAEhCqI,OAAO,SAAAwM,GAAA,OAAAA,EAAGtY,OAAqBU,IAC/Bb,OAAO,SAAC6R,EAAD6G,GAAA,IAAQ9U,EAAR8U,EAAQ9U,EAAR,OAAgBgO,KAAKC,IAAIjO,EAAGiO,IAAM3L,EAAQlB,QACpD,MAAO,CAAE7E,MAAO+F,EAAQuN,GAAO5S,cAAe2C,KAAMiQ,IAGhDuD,GAAc,SAClB2B,EACA3C,EACA4C,GAEA,IAAMC,EAAU,CAAC,QAAS,QAAS,QAAS,QAAS,QAAS,SACxDC,EAAe,IAAIxM,IACvB0J,EAAM/J,OAAO,SAAAtF,GAAC,OAAIA,EAAEkE,WAAWkO,MAAMJ,KAAgB5Y,IAAI,SAAA4G,GAAC,OAAIA,EAAE8D,cAE5DuO,EAAiB,IAAI1M,IACzBsM,EACG3M,OAAO,SAAAH,GAAC,OAAIgN,EAAahE,IAAIhJ,EAAErB,cAC/B1K,IAAI,SAAA+L,GAAC,OAAIA,EAAErB,cAGVwO,EAAoB,IAAI3M,IAC5B0J,EACG/J,OAAO,SAAAtF,GAAC,OAAIA,EAAEkE,WAAWkO,MAAMJ,KAC/B1M,OAAO,SAAAtF,GAAC,OAAIA,EAAEkE,WAAWqO,UAAU,EAAG,IAAMvS,EAAE8D,WAAWyO,UAAU,EAAG,KACtEnZ,IAAI,SAAA4G,GAAC,OAAIA,EAAE8D,cAGVtK,EAAQ0Y,EAAQ9Y,IAAI,SAAA4D,GAAC,MAAK,CAAEkU,MAAO,EAAGD,OAAQ,KAqBpD,OApBAiB,EAAQnV,QAAQ,SAACyV,EAAQvV,GACvBkV,EAAapV,QAAQ,SAAAK,GACfA,EAAGgV,MAAMI,KACPF,EAAkBnE,IAAI/Q,GACxB5D,EAAMyD,EAAI,GAAGiU,OAAS,EAEtB1X,EAAMyD,GAAGiU,OAAS,KAIxBmB,EAAetV,QAAQ,SAAAK,GACjBA,EAAGgV,MAAMI,KACPF,EAAkBnE,IAAI/Q,GACxB5D,EAAMyD,EAAI,GAAGgU,QAAU,EAEvBzX,EAAMyD,GAAGgU,QAAU,OAKpBzX,EAAM8L,OAAO,SAAAqD,GAAC,OAAIA,EAAEuI,MAAQ,KAGtB1C,0BJjaV3C,yHAOL,IKCK4G,GLDCC,GAAkB,SAACzQ,GACvB,OAAQA,GACN,KAAK4J,GAAO8G,QACV,MAAO,GACT,KAAK9G,GAAO+G,OACV,MAAO,gBACT,KAAK/G,GAAOzD,OACV,MAAO,gBACT,KAAKyD,GAAOgH,YACV,MAAO,iBAmBPC,eACJ,SAAAA,EAAY/W,GAAc,IAAAC,EAAA,OAAAhC,OAAAiC,EAAA,EAAAjC,CAAAkC,KAAA4W,IACxB9W,EAAAhC,OAAAmC,EAAA,EAAAnC,CAAAkC,KAAAlC,OAAAoC,EAAA,EAAApC,CAAA8Y,GAAAzW,KAAAH,KAAMH,KACDO,MAAQ,CACXoH,SAAU,GACVxK,SAAU,IAAIS,KAJQqC,mFAQN,IAAAQ,EAAAN,KAClBoH,QAAQC,IAAI,ClBoBdhJ,EAAqBzB,EAAmB,kBkBlBpC0K,IACAA,MACC/G,KAAK,SAAA3C,GAAiC,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAF,EAAA,GAA/BZ,EAA+Ba,EAAA,GAArB2J,EAAqB3J,EAAA,GACjCgZ,EADiChZ,EAAA,GACnBV,OAAO,SAACD,EAAK4Z,GAC/B,IAAMC,EAAO7Z,EAAIK,IAAIuZ,EAAK9O,YAM1B,OALI+O,EACFA,EAAK/V,KAAK8V,EAAKlP,YAEf1K,EAAIM,IAAIsZ,EAAK9O,WAAY,CAAC8O,EAAKlP,aAE1B1K,GACN,IAAIO,KAEDuZ,EAAcha,EACjBE,IAAI,SAAA2I,GAAC,OAAA/H,OAAAsK,EAAA,EAAAtK,CAAA,CAAOiI,OAAQ4J,GAAO8G,SAAY5Q,KACvC1I,OACC,SAACD,EAAK2I,GAAN,OAAY3I,EAAIM,IAAIqI,EAAE3E,GAAI2E,IAC1B,IAAIpI,KAGFwZ,EAAyBzP,EAAStK,IAAI,SAAAqI,GAC1C,IAAM2R,EAAaL,EAAMtZ,IAAIgI,EAAQrE,IACrC,OAAIgW,EACK,CAAE3R,UAAS2R,cAEX,CAAE3R,UAAS2R,WAAY,MAIlC5W,EAAKa,SACH,CAAEqG,SAAUyP,EAAwBja,SAAUga,GAC9C,WACE1W,EAAK8S,YAAY9S,EAAKT,MAAM4I,yDAMjBC,GACb1I,KAAKH,QAAU6I,GACjB1I,KAAKoT,YAAYpT,KAAKH,MAAM4I,8CAIpBA,GAAoB,IAAAG,EAAA5I,KACxBtB,EAAO+J,EAAStG,OAAS,EAAIsG,EAAS,GAAK,GAC3CJ,EAASI,EAAS7J,MAAM,GAE9BwI,QAAQC,IAAIoB,EAASvL,IAAI,SAAAG,GAAO,OAAIiK,EAAqBjK,MACtDkD,KAAK,SAAAvB,GAAC,OAAIA,EAAE6J,SACZtI,KAAK,SAAAuI,GAAW,OACfA,EACGM,OACC,SAAAH,GAAC,OACCA,EAAE5L,UAAYqB,GACb2J,EAAOkB,SAASN,EAAE5L,UAAYgH,GAAW4E,EAAE3E,UAE/CpH,IAAI,SAAA8G,GAAqC,IAAlC4D,EAAkC5D,EAAlC4D,WAAYvK,EAAsB2G,EAAtB3G,QAASiH,EAAaN,EAAbM,OAC3B,OAAIjH,IAAYqB,EACV2F,GAAWC,GACN,CAAEsD,aAAY7B,OAAQ4J,GAAO+G,QAE7B,CAAE9O,aAAY7B,OAAQ4J,GAAOzD,QAG/B,CAAEtE,aAAY7B,OAAQ4J,GAAOgH,eAGvClW,KAAK,SAACtB,EAAGuB,GAAJ,OAAUvB,EAAE4G,OAASrF,EAAEqF,SAC5B5I,OACC,SAACD,EAAK+L,GAAN,OAAY/L,EAAIM,IAAIyL,EAAErB,WAAYqB,EAAElD,SACpC,IAAItI,OAGT8C,KAAK,SAAArD,GACJ,IAAMF,EAAWU,MAAMC,KAAKiL,EAAKxI,MAAMpD,SAASkT,UAC7ChT,IAAI,SAAA2I,GACH,IAAME,EAAS7I,EAAIK,IAAIsI,EAAE3E,IACnB9D,EAAUU,OAAOgM,OAAO,GAAIjE,GAKlC,OAJAzI,EAAQ2I,OAAS4J,GAAO8G,aACT9P,IAAXZ,IACF3I,EAAQ2I,OAASA,GAEZ3I,IAERD,OACC,SAACD,EAAK2I,GAAN,OAAY3I,EAAIM,IAAIqI,EAAE3E,GAAI2E,IAC1B,IAAIpI,KAERmL,EAAKzH,SAAS,CAAEnE,gDAIb,IAAA2W,EACwB3T,KAAKI,MAA5BpD,EADD2W,EACC3W,SACFma,EAFCxD,EACWnM,SAEftK,IAAI,SAAA+G,GAA6B,IAA1BsB,EAA0BtB,EAA1BsB,QAAS2R,EAAiBjT,EAAjBiT,WACTE,EAAmC,GAQzC,OAPAF,EACGha,IAAI,SAAAgE,GAAE,OAAIlE,EAASO,IAAI2D,KACvBL,QAAQ,SAAAzD,GACHA,GACFga,EAAYpW,KAAK5D,KAGhBU,OAAAsK,EAAA,EAAAtK,CAAA,CACLd,SAAUoa,EAAY3W,KAAK,SAACtB,EAAGuB,GAAJ,OAAUvB,EAAEoC,MAAMgH,cAAc7H,EAAEa,UAC1DgE,KAGN9E,KAAK,SAACtB,EAAGuB,GAAJ,OAAUA,EAAEyH,mBAAqBhJ,EAAEgJ,qBAErCkP,EAAMF,EAAqB/N,OAAO,SAAAjD,GAAA,OAAAA,EAAGjF,GAAYgV,MAAM,gBACvDoB,EAAMH,EAAqB/N,OAAO,SAAA7C,GAAA,OAAAA,EAAGrF,GAAYgV,MAAM,gBACvDqB,EAAMJ,EAAqB/N,OAAO,SAAA5C,GAAA,OAAAA,EAAGtF,GAAYgV,MAAM,gBACvDsB,EAASL,EAAqB/N,OAAO,SAAA3C,GAAA,OAAAA,EAAGvF,GACzCgV,MAAM,0BAGX,OACE9U,EAAAjC,EAAAkC,cAAA,WACED,EAAAjC,EAAAkC,cAACoW,GAAD,CAAqBjQ,SAAU6P,EAAK9V,MAAM,6BAC1CH,EAAAjC,EAAAkC,cAACoW,GAAD,CAAqBjQ,SAAU8P,EAAK/V,MAAM,4BAC1CH,EAAAjC,EAAAkC,cAACoW,GAAD,CAAqBjQ,SAAU+P,EAAKhW,MAAM,0BAE1CH,EAAAjC,EAAAkC,cAACC,EAAA,EAAD,CAAKgC,UAAU,QACblC,EAAAjC,EAAAkC,cAAA,6BAEFD,EAAAjC,EAAAkC,cAACqW,GAAD,CAAclQ,SAAUgQ,YA5IRlV,IAAMC,WAkJxBoV,GAAe,SAAAjR,GAAA,IACnBc,EADmBd,EACnBc,SADmB,OAKnBpG,EAAAjC,EAAAkC,cAAA,WACGmG,EAAStK,IAAI,SAAAkY,GAAA,IAAGlU,EAAHkU,EAAGlU,GAAIK,EAAP6T,EAAO7T,MAAOvE,EAAdoY,EAAcpY,SAAd,OACZoE,EAAAjC,EAAAkC,cAAA,OAAKoC,IAAKvC,GACRE,EAAAjC,EAAAkC,cAAA,cACED,EAAAjC,EAAAkC,cAAA,KAAGiJ,OAAO,SAASF,KAAMC,GAAqBnJ,IAC3CK,IAGLH,EAAAjC,EAAAkC,cAACuW,GAAA,EAAD,CAAOjW,SAAO,EAAC0E,UAAQ,EAACzE,OAAK,EAAC0E,YAAU,GACtClF,EAAAjC,EAAAkC,cAAA,aACED,EAAAjC,EAAAkC,cAAA,UACGrE,EACEyD,KAAK,SAACtB,EAAGuB,GAAJ,OAAUvB,EAAEoC,MAAMgH,cAAc7H,EAAEa,SACvCrE,IAAI,SAAA2I,GAAC,OACJzE,EAAAjC,EAAAkC,cAAA,MAAIoC,IAAKoC,EAAE3E,GAAIoC,UAAWkT,GAAgB3Q,EAAEE,SAC1C3E,EAAAjC,EAAAkC,cAAA,KACEiJ,OAAO,SACPF,KAAMC,GAAqBxE,EAAE3E,GAAI2E,EAAEmC,aAElCnC,EAAEtE,kBAYnBsW,GAAsB,SAAAxC,GAMtB,IALJ7N,EAKI6N,EALJ7N,SACAjG,EAII8T,EAJJ9T,MAKMuW,EAAoBtQ,EACvBtK,IAAI,SAAAuP,GAAC,OAAIA,EAAEzP,SAASmF,SACpBhF,OAAO,SAAC4a,EAASza,GAAV,OAAoByR,KAAKyG,IAAIuC,EAASza,IAAQ,GAClD0a,EAAgB,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAAMpZ,MACzD,EACAkZ,GAGF,OACE1W,EAAAjC,EAAAkC,cAACC,EAAA,EAAD,CAAKgC,UAAU,QACblC,EAAAjC,EAAAkC,cAAA,UAAKE,GACLH,EAAAjC,EAAAkC,cAACG,EAAA,eAAD,CAAgBnB,KAAMmH,GACpBpG,EAAAjC,EAAAkC,cAACG,EAAA,kBAAD,CACEa,OAAK,EACLD,UAAU,KACV+H,WAAY,SACVrJ,EACA6B,GAFU,OAIVvB,EAAAjC,EAAAkC,cAAA,KAAG+I,KAAMC,GAAqB1H,EAAIzB,IAAKoJ,OAAO,UAC3C3H,EAAIzB,GAAG+W,iBARd,WAcCD,EAAc9a,IAAI,SAACuP,EAAG1L,GAAJ,OACjBK,EAAAjC,EAAAkC,cAACG,EAAA,kBAAD,CACEY,UAAWqK,EACXhJ,IAAKgJ,EACLyL,gBAAiB,SACfpX,EADe6U,GAGZ,IADD3Y,EACC2Y,EADD3Y,SAGF,OADgBA,EAAS+D,GAEhByV,GAAgBxZ,EAAS+D,GAAGgF,QAE5B,IAGXoE,WAAY,SACVrJ,EADU8U,GAGP,IADD1U,EACC0U,EADD1U,GAAIlE,EACH4Y,EADG5Y,SAGN,OADgBA,EAAS+D,GAGrBK,EAAAjC,EAAAkC,cAAA,KACE+I,KAAMC,GAAqBrN,EAAS+D,GAAGG,GAAIA,GAC3CoJ,OAAO,UAENtN,EAAS+D,GAAGQ,OAIV,MAIVkL,QAQEmK,6EM/RAuB,GAXC,kBACd/W,EAAAjC,EAAAkC,cAACC,EAAA,EAAD,KAAKF,EAAAjC,EAAAkC,cAAC+W,GAAAjZ,EAAD,CAAKiS,GAAG,IAAIC,GAAG,KAAIjQ,EAAAjC,EAAAkC,cAACgX,GAAA,EAAD,KACtBjX,EAAAjC,EAAAkC,cAACiX,GAAA,EAAD,CAASvL,KAAG,EAACF,MAAM,OAAO0L,IAAI,0DAA0DC,IAAI,mBAC5FpX,EAAAjC,EAAAkC,cAACoX,GAAA,EAAD,KACErX,EAAAjC,EAAAkC,cAACqX,GAAA,EAAD,6CACAtX,EAAAjC,EAAAkC,cAACsX,GAAA,EAAD,0ODSDpC,iEAYCqC,eAIJ,SAAAA,EAAY/Y,GAAY,IAAAC,EAAA,OAAAhC,OAAAiC,EAAA,EAAAjC,CAAAkC,KAAA4Y,IACtB9Y,EAAAhC,OAAAmC,EAAA,EAAAnC,CAAAkC,KAAAlC,OAAAoC,EAAA,EAAApC,CAAA8a,GAAAzY,KAAAH,KAAMH,KACDO,MAAQ,CACX/C,QAAS,GACTwb,SAAU,GACVC,KAAMvC,GAASwC,OALKjZ,sEASjBkZ,GACLhZ,KAAKmB,SAAS,CAAE2X,KAAME,IADG,IAAArF,EAEK3T,KAAKI,MAA3B/C,EAFiBsW,EAEjBtW,QAASwb,EAFQlF,EAERkF,SAEXrY,EAAkB,GACpBnD,EAAQ6Y,MAAM/R,GAChB3D,EAAMQ,KAAK3D,GAEXmD,EAAMQ,KAAK,IAET6X,EAAS3C,MAAM9R,KACjByU,EACGI,MAAM,KACN7P,OAAO,SAAA1K,GAAI,OAAIA,EAAKyD,OAAS,IAC7BtB,QAAQ,SAAAnC,GAAI,OAAI8B,EAAMQ,KAAKtC,KAGhC,IAAMwa,EAAmBlZ,KAAKH,MAAMsZ,SAASC,SAEvCC,EAAgB,IAAML,EAAW,IAAMxY,EAAM8Y,KAAK,KACpDJ,IAAqBG,GACvBrZ,KAAKH,MAAM0Z,QAAQvY,KAAKqY,+CAIR,IAAAG,EACkBxZ,KAAKyZ,kBAAjCX,EADUU,EACVV,KAAMzb,EADImc,EACJnc,QAASwb,EADLW,EACKX,SACvB7Y,KAAKmB,SAAS,CAAE2X,OAAMzb,UAASwb,wDAGdnQ,GACjB,GAAI1I,KAAKH,MAAMsZ,SAASC,WAAa1Q,EAAUyQ,SAASC,SAAU,KAAAM,EAC5B1Z,KAAKyZ,kBAAjCX,EADwDY,EACxDZ,KAAMzb,EADkDqc,EAClDrc,QAASwb,EADyCa,EACzCb,SACvB7Y,KAAKmB,SAAS,CAAE2X,OAAMzb,UAASwb,wDAKjC,IAAIC,EAAOvC,GAASwC,MACZK,EAAapZ,KAAKH,MAAMsZ,SAAxBC,SACJA,EAASlD,MAAM,WACjB4C,EAAOvC,GAASoD,KACPP,EAASlD,MAAM,aACxB4C,EAAOvC,GAASqD,MAGlB,IAAMC,EAAST,EAASH,MAAM,KAM9B,MAAO,CAAEH,OAAMzb,QALCwc,EAAO1X,QAAU,EAAI0X,EAAO,GAAK,GAKzBhB,SAJPgB,EACdjb,MAAM,GACNwK,OAAO,SAAA+F,GAAC,OAAIA,EAAEhN,OAAS,IACvBmX,KAAK,uCAID,IAAAhZ,EAAAN,KACH8Z,EAAW,IAaf,OAZI9Z,KAAKI,MAAM/C,QAAQ8E,OAAS,GAAKnC,KAAKI,MAAMyY,SAAS1W,OAAS,KAChE2X,GAAY,UAEV9Z,KAAKI,MAAM/C,QAAQ8E,OAAS,IAC9B2X,GAAY9Z,KAAKI,MAAM/C,QAAU,KAE/B2C,KAAKI,MAAMyY,SAAS1W,OAAS,IAC/B2X,GAAY9Z,KAAKI,MAAMyY,SACpBI,MAAM,KACN7P,OAAO,SAAAH,GAAC,OAAIA,EAAEiN,MAAM/R,KACpBmV,KAAK,MAGRlY,EAAAjC,EAAAkC,cAAC0Y,GAAA,EAAD,CAAQtP,MAAM,QAAQuP,OAAK,EAACC,OAAO,MACjC7Y,EAAAjC,EAAAkC,cAAC6Y,GAAA,EAAD,CAAaC,IAAKC,KAAYC,GAAIP,GAAlC,6BAGA1Y,EAAAjC,EAAAkC,cAACiZ,GAAA,EAAD,CAAKhX,UAAU,UAAUiX,QAAM,GAC7BnZ,EAAAjC,EAAAkC,cAACmZ,GAAA,EAAD,CAAMC,QAAM,GACVrZ,EAAAjC,EAAAkC,cAACqZ,GAAA,EAAD,CAAWpX,UAAU,wBACnBlC,EAAAjC,EAAAkC,cAACsZ,GAAA,EAAD,CACE/L,MAAO,CAAE/B,MAAO,SAChB+N,WAAY,SAAA9W,GACG,SAATA,EAAEL,KACJnD,EAAKua,OAAOva,EAAKF,MAAM0Y,OAG3B5W,MAAOlC,KAAKI,MAAM/C,QAClBgQ,KAAK,OACL9J,KAAK,UACLrC,GAAG,UACH4Z,YAAY,UACZC,SAAU,SAAAjX,GAAC,OAAIxD,EAAKa,SAAS,CAAE9D,QAASyG,EAAEwG,OAAOpI,YAGrDd,EAAAjC,EAAAkC,cAACqZ,GAAA,EAAD,CAAWpX,UAAU,wBACnBlC,EAAAjC,EAAAkC,cAACsZ,GAAA,EAAD,CACE/L,MAAO,CAAE/B,MAAO,SAChB+N,WAAY,SAAA9W,GACG,SAATA,EAAEL,KACJnD,EAAKua,OAAOva,EAAKF,MAAM0Y,OAG3B5W,MAAOlC,KAAKI,MAAMyY,SAClBxL,KAAK,OACL9J,KAAK,WACLrC,GAAG,WACH4Z,YAAY,gBACZC,SAAU,SAAAjX,GAAC,OAAIxD,EAAKa,SAAS,CAAE0X,SAAU/U,EAAEwG,OAAOpI,YAGtDd,EAAAjC,EAAAkC,cAAC+O,GAAA,EAAD,CACE9M,UAAU,uBACV2I,QAAS,WACP3L,EAAKua,OAAOtE,GAASwC,SAHzB,SAQA3X,EAAAjC,EAAAkC,cAAC+O,GAAA,EAAD,CACE9M,UAAU,uBACV2I,QAAS,WACP3L,EAAKua,OAAOtE,GAASqD,QAHzB,QAQAxY,EAAAjC,EAAAkC,cAAC+O,GAAA,EAAD,CACE9M,UAAU,uBACV2I,QAAS,WACP3L,EAAKua,OAAOtE,GAASoD,QAHzB,eAUJvY,EAAAjC,EAAAkC,cAACiZ,GAAA,EAAD,CAAKhX,UAAU,UAAUiX,QAAM,GAC7BnZ,EAAAjC,EAAAkC,cAACuK,EAAA,EAAD,CAAsBoP,KAAG,EAACC,UAAQ,GAChC7Z,EAAAjC,EAAAkC,cAACwK,EAAA,EAAD,CAAgBmP,KAAG,EAAClP,OAAK,GAAzB,YAGA1K,EAAAjC,EAAAkC,cAAC0K,EAAA,EAAD,CAAciB,OAAK,GACjB5L,EAAAjC,EAAAkC,cAAC2K,EAAA,EAAD,CAAcmO,IAAKC,KAAYC,GAAG,OAAlC,YAGAjZ,EAAAjC,EAAAkC,cAAC2K,EAAA,EAAD,CAAcmO,IAAKC,KAAYC,GAAG,SAAlC,uBAGAjZ,EAAAjC,EAAAkC,cAAC2K,EAAA,EAAD,CAAcmO,IAAKC,KAAYC,GAAG,UAAlC,wBAGAjZ,EAAAjC,EAAAkC,cAAC2K,EAAA,EAAD,CAAcmO,IAAKC,KAAYC,GAAG,UAAlC,YAGAjZ,EAAAjC,EAAAkC,cAAC2K,EAAA,EAAD,CAAcmO,IAAKC,KAAYC,GAAG,QAAlC,uBAGAjZ,EAAAjC,EAAAkC,cAAC2K,EAAA,EAAD,CAAcmO,IAAKC,KAAYC,GAAG,SAAlC,qBAMJjZ,EAAAjC,EAAAkC,cAACuK,EAAA,EAAD,CAAsBoP,KAAG,EAACC,UAAQ,GAChC7Z,EAAAjC,EAAAkC,cAACwK,EAAA,EAAD,CAAgBmP,KAAG,EAAClP,OAAK,GAAzB,SAGA1K,EAAAjC,EAAAkC,cAAC0K,EAAA,EAAD,CAAciB,OAAK,GACjB5L,EAAAjC,EAAAkC,cAAC2K,EAAA,EAAD,CAAcmO,IAAKC,KAAYC,GAAG,YAAlC,gBAMJjZ,EAAAjC,EAAAkC,cAACuK,EAAA,EAAD,CAAsBoP,KAAG,EAACC,UAAQ,GAChC7Z,EAAAjC,EAAAkC,cAACwK,EAAA,EAAD,CAAgBmP,KAAG,EAAClP,OAAK,GAAzB,SAGA1K,EAAAjC,EAAAkC,cAAC0K,EAAA,EAAD,CAAciB,OAAK,GACjB5L,EAAAjC,EAAAkC,cAAC2K,EAAA,EAAD,CAAcmO,IAAI,IAAI/P,KAAK,sBAAsBE,OAAO,UAAxD,WAGAlJ,EAAAjC,EAAAkC,cAAC2K,EAAA,EAAD,CACEmO,IAAI,IACJ/P,KAAK,4BACLE,OAAO,UAHT,YAOAlJ,EAAAjC,EAAAkC,cAAC2K,EAAA,EAAD,CACEmO,IAAI,IACJ/P,KAAK,8CACLE,OAAO,UAHT,qBAOAlJ,EAAAjC,EAAAkC,cAAC2K,EAAA,EAAD,CACEmO,IAAI,IACJ/P,KAAK,gDACLE,OAAO,UAHT,UAOAlJ,EAAAjC,EAAAkC,cAAC2K,EAAA,EAAD,CACEmO,IAAI,IACJ/P,KAAK,+BACLE,OAAO,UAHT,aAOAlJ,EAAAjC,EAAAkC,cAAC2K,EAAA,EAAD,CACEmO,IAAI,IACJ/P,KAAK,0BACLE,OAAO,UAHT,YASC,YAtOsBhI,IAAMC,WA8O5B2Y,GAFOC,aAAWvC,IEnP3BwC,GAAgB,SAAAxd,GAAA,IAERP,EAFQO,EACpBsY,MACE2D,OAAUxc,QAFQ,OAIFA,EAAUA,EAAQ4b,MAAM,KAAO,IAE7CoC,GAAc,WAGlB,OADwD,IADrCC,OAAOC,UAAUC,UACDC,QAAQ,QAClBra,EAAAjC,EAAAkC,cAACmJ,EAAA,EAAD,CAAOC,MAAM,UAAb,mCAAgE,MA2E5EiR,oLAtEX,IAAM7B,EAAS,IAAI8B,gBAAgBxC,SAAS5M,QACtCqP,EAAa/B,EAAOtc,IAAI,QACxBse,EAAehC,EAAOtc,IAAI,UAC1Bue,EAAajC,EAAOtc,IAAI,QAE9B,OACE6D,EAAAjC,EAAAkC,cAAC0a,EAAA,EAAD,KACE3a,EAAAjC,EAAAkC,cAAA,WACED,EAAAjC,EAAAkC,cAAC2a,GAAD,MACA5a,EAAAjC,EAAAkC,cAAC4a,EAAA,EAAD,CAAWrN,MAAO,CAAE/B,MAAO,OAAQqP,SAAU,QAC3C9a,EAAAjC,EAAAkC,cAAC8a,GAAD,MACA/a,EAAAjC,EAAAkC,cAAC+a,EAAA,EAAD,KACEhb,EAAAjC,EAAAkC,cAACgb,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,MAAMC,UAAWha,IACnCpB,EAAAjC,EAAAkC,cAACgb,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,QAAQC,UAAW5Z,IACrCxB,EAAAjC,EAAAkC,cAACgb,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,SAASC,UAAWzZ,IACtC3B,EAAAjC,EAAAkC,cAACgb,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,SAASC,UAAW1Z,IACtC1B,EAAAjC,EAAAkC,cAACgb,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,OAAOC,UAAWxZ,IACpC5B,EAAAjC,EAAAkC,cAACgb,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,QAAQC,UAAW9Y,IACrCtC,EAAAjC,EAAAkC,cAACgb,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,WAAWC,UAAWrE,KACxC/W,EAAAjC,EAAAkC,cAACgb,EAAA,EAAD,CACEE,KAAK,iCACLC,UAAW,SAAC3c,GAAD,OACTuB,EAAAjC,EAAAkC,cAACob,GAAD,CAAUhU,SAAU2S,GAAcvb,QAGtCuB,EAAAjC,EAAAkC,cAACgb,EAAA,EAAD,CACEE,KAAK,kCACLC,UAAW,SAAC3c,GAAD,OACTuB,EAAAjC,EAAAkC,cAACqb,GAAD,CAAWjU,SAAU2S,GAAcvb,QAGvCuB,EAAAjC,EAAAkC,cAACgb,EAAA,EAAD,CACEE,KAAK,iCACLC,UAAW,SAAC3c,GAAD,OACTuB,EAAAjC,EAAAkC,cAACsb,GAAD,CAAUlU,SAAU2S,GAAcvb,QAGtCuB,EAAAjC,EAAAkC,cAACgb,EAAA,EAAD,CACEC,OAAK,EACLC,KAAK,IACLK,OAAQ,WACN,IAAMle,EACU,MAAdkd,GAAsBA,EAAW1F,MAAM/R,GACnCyX,EACA,GACAvT,EACY,MAAhBwT,GACEA,EAAa3F,MAAM9R,IACjByX,EAAa5C,MAAM,KACnB,GACAH,EACW,SAAfgD,EACI,OACe,SAAfA,EACE,OACA,QAER,OACE1a,EAAAjC,EAAAkC,cAACwb,EAAA,EAAD,CAAUxC,GAAE,IAAA1b,OAAMma,EAAN,KAAAna,OAAcD,EAAd,KAAAC,OAAsB0J,EAAOiR,KAAK,sBA5DhD/W,aCvBEua,QACW,cAA7BxB,OAAOnC,SAAS4D,UAEe,UAA7BzB,OAAOnC,SAAS4D,UAEhBzB,OAAOnC,SAAS4D,SAAS7G,MACvB,2DCVN8G,IAASJ,OAAOxb,EAAAjC,EAAAkC,cAAC4b,GAAD,MAASC,SAASC,eAAe,SDiI3C,kBAAmB5B,WACrBA,UAAU6B,cAAcC,MAAM9c,KAAK,SAAA+c,GACjCA,EAAaC","file":"static/js/main.f006cb81.chunk.js","sourcesContent":["import Contest from \"../interfaces/Contest\";\nimport Problem from \"../interfaces/Problem\";\nimport MergedProblem from \"../interfaces/MergedProblem\";\nimport UserInfo from \"../interfaces/UserInfo\";\nimport Submission from \"../interfaces/Submission\";\n\nconst UPDATED_BASE_URL = \"https://kimiyuki.net/AtCoderProblemsStatic\";\nconst BASE_URL = \"https://kenkoooo.com/atcoder\";\nconst STATIC_API_BASE_URL = BASE_URL + \"/resources\";\nconst DYNAMIC_API_BASE_URL = BASE_URL + \"/atcoder-api\";\n\nconst AC_COUNT_URL = STATIC_API_BASE_URL + \"/ac.json\";\nconst SUM_URL = STATIC_API_BASE_URL + \"/sums.json\";\nconst LANG_URL = STATIC_API_BASE_URL + \"/lang.json\";\n\ninterface RankingEntry {\n  problem_count: number;\n  user_id: string;\n}\n\nconst generateRanking = (\n  problems: MergedProblem[],\n  property: \"fastest_user_id\" | \"shortest_user_id\" | \"first_user_id\"\n) => {\n  const map = problems.reduce((map, problem) => {\n    const user_id = problem[property];\n    if (user_id) {\n      const count = map.get(user_id);\n      if (count) {\n        return map.set(user_id, count + 1);\n      } else {\n        return map.set(user_id, 1);\n      }\n    } else {\n      return map;\n    }\n  }, new Map<string, number>());\n  return Array.from(map).map(([user_id, problem_count]) => ({\n    user_id,\n    problem_count\n  }));\n};\n\nexport const getShortRanking = (problems: MergedProblem[]) =>\n  generateRanking(problems, \"shortest_user_id\");\nexport const getFastRanking = (problems: MergedProblem[]) =>\n  generateRanking(problems, \"fastest_user_id\");\nexport const getFirstRanking = (problems: MergedProblem[]) =>\n  generateRanking(problems, \"first_user_id\");\n\nexport const fetchACRanking = () => fetchJson<RankingEntry[]>(AC_COUNT_URL);\n\nexport const fetchSumRanking = () =>\n  fetchJson<\n    {\n      user_id: string;\n      point_sum: number;\n    }[]\n  >(SUM_URL);\n\nexport const fetchLangRanking = () =>\n  fetchJson<\n    {\n      user_id: string;\n      count: number;\n      language: string;\n    }[]\n  >(LANG_URL);\nexport const fetchContestProblemPairs = () =>\n  fetchJson<{ contest_id: string; problem_id: string }[]>(\n    UPDATED_BASE_URL + \"/contest-problem.json\"\n  );\nexport const fetchContests = () =>\n  fetchJson<Contest[]>(UPDATED_BASE_URL + \"/contests.json\");\nexport const fetchProblems = () =>\n  fetchJson<Problem[]>(UPDATED_BASE_URL + \"/problems.json\");\nexport const fetchMergedProblems = () =>\n  fetchJson<MergedProblem[]>(STATIC_API_BASE_URL + \"/merged-problems.json\");\nexport const fetchProblemPerformances = () =>\n  fetchJson<\n    {\n      problem_id: string;\n      minimum_performance: number;\n    }[]\n  >(STATIC_API_BASE_URL + \"/problem-performances.json\");\nexport const fetchUserInfo = (user: string) =>\n  fetchJson<UserInfo>(`${DYNAMIC_API_BASE_URL}/v2/user_info?user=${user}`);\nexport const fetchSubmissions = (user: string) =>\n  fetchJson<Submission[]>(`${UPDATED_BASE_URL}/results/${user.slice(0, 2).toLowerCase()}/${user}.json`);\n\nasync function fetchJson<T>(url: string): Promise<T> {\n  const r = await fetch(url);\n  const json = await r.json();\n  return json as T;\n}\n","import React from 'react';\nimport { Row } from 'reactstrap';\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\n\ninterface Props {\n\ttitle: string;\n\tfetch: (() => Promise<{ count: number; id: string }[]>);\n}\n\ninterface User {\n\tcount: number;\n\tid: string;\n\trank: number;\n}\n\ninterface State {\n\tdata: User[];\n}\n\nclass Ranking extends React.Component<Props, State> {\n\tconstructor(props: Props) {\n\t\tsuper(props);\n\t\tthis.state = { data: [] };\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.props.fetch().then((users) => {\n\t\t\tusers.sort((a, b) => b.count - a.count);\n\t\t\tconst rank: number[] = [];\n\t\t\tlet cur = 1;\n\t\t\tusers.forEach((_, i) => {\n\t\t\t\tif (i > 0 && users[i].count < users[i - 1].count) {\n\t\t\t\t\tcur = i + 1;\n\t\t\t\t}\n\t\t\t\trank.push(cur);\n\t\t\t});\n\t\t\tconst data = users.map((u, i) => ({\n\t\t\t\tcount: u.count,\n\t\t\t\tid: u.id,\n\t\t\t\trank: rank[i]\n\t\t\t}));\n\t\t\tthis.setState({ data });\n\t\t});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Row>\n\t\t\t\t<h2>{this.props.title}</h2>\n\t\t\t\t<BootstrapTable\n\t\t\t\t\theight=\"auto\"\n\t\t\t\t\tdata={this.state.data}\n\t\t\t\t\tpagination\n\t\t\t\t\tstriped\n\t\t\t\t\thover\n\t\t\t\t\toptions={{\n\t\t\t\t\t\tpaginationPosition: 'top',\n\t\t\t\t\t\tsizePerPage: 20,\n\t\t\t\t\t\tsizePerPageList: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttext: '20',\n\t\t\t\t\t\t\t\tvalue: 20\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttext: '50',\n\t\t\t\t\t\t\t\tvalue: 50\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttext: '100',\n\t\t\t\t\t\t\t\tvalue: 100\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttext: '200',\n\t\t\t\t\t\t\t\tvalue: 200\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttext: 'All',\n\t\t\t\t\t\t\t\tvalue: this.state.data.length\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<TableHeaderColumn dataField=\"rank\">#</TableHeaderColumn>\n\t\t\t\t\t<TableHeaderColumn dataField=\"id\" isKey>\n\t\t\t\t\t\tUser\n\t\t\t\t\t</TableHeaderColumn>\n\t\t\t\t\t<TableHeaderColumn dataField=\"count\">Count</TableHeaderColumn>\n\t\t\t\t</BootstrapTable>\n\t\t\t</Row>\n\t\t);\n\t}\n}\n\nexport default Ranking;\n","import React from 'react';\nimport * as ApiUrl from '../utils/Api';\nimport Ranking from '../components/Ranking';\n\nconst ACRanking = () => (\n\t<Ranking\n\t\ttitle=\"AC Count Ranking\"\n\t\tfetch={() =>\n\t\t\tApiUrl.fetchACRanking().then((rows) => rows.map((row) => ({ count: row.problem_count, id: row.user_id })))}\n\t/>\n);\n\nexport default ACRanking;\n","import React from 'react';\nimport * as ApiUrl from \"../utils/Api\";\nimport Ranking from \"../components/Ranking\";\n\nconst FastestRanking = () => (\n    <Ranking\n        title=\"Fastest Submission Ranking\"\n        fetch={() => ApiUrl.fetchMergedProblems().then(problems => ApiUrl.getFastRanking(problems).map(({ problem_count, user_id }) => ({ count: problem_count, id: user_id })))}\n    />\n);\n\nexport default FastestRanking;\n","import React from 'react';\nimport * as ApiUrl from \"../utils/Api\";\nimport Ranking from \"../components/Ranking\";\n\nconst FirstRanking = () => (\n    <Ranking\n        title=\"First AC Ranking\"\n        fetch={() => ApiUrl.fetchMergedProblems().then(problems => ApiUrl.getFirstRanking(problems).map(({ problem_count, user_id }) => ({ count: problem_count, id: user_id })))}\n    />\n);\n\nexport default FirstRanking;\n","import React from \"react\";\nimport * as ApiUrl from \"../utils/Api\";\nimport Ranking from \"../components/Ranking\";\n\nconst ShortRanking = () => (\n  <Ranking\n    title=\"Top Golfers\"\n    fetch={() => ApiUrl.fetchMergedProblems().then(problems => ApiUrl.getShortRanking(problems).map(({ problem_count, user_id }) => ({ count: problem_count, id: user_id })))}\n  />\n);\n\nexport default ShortRanking;\n","import React from \"react\";\nimport * as ApiUrl from \"../utils/Api\";\nimport Ranking from \"../components/Ranking\";\n\nconst SumRanking = () => (\n  <Ranking\n    title=\"Rated Point Ranking\"\n    fetch={() =>\n      ApiUrl.fetchSumRanking().then(rows =>\n        rows.map(row => ({ count: row.point_sum, id: row.user_id }))\n      )\n    }\n  />\n);\n\nexport default SumRanking;\n","import React from \"react\";\nimport { Row, Col } from \"reactstrap\";\n\nimport * as Api from \"../utils/Api\";\n\nconst ordinalNumbers = [\"1st\", \"2nd\", \"3rd\"];\n\ninterface Ranking {\n  language: string;\n  ranking: { name: string; count: number }[];\n}\n\nconst OneOwner = ({\n  language,\n  ranking\n}: {\n  language: string;\n  ranking: { name: string; count: number }[];\n}) => (\n  <div>\n    <Row className=\"justify-content-center my-2 border-bottom\">\n      <h1>{language}</h1>\n    </Row>\n    <Row>\n      {ranking.slice(0, 3).map(({ name, count }, i) => (\n        <Col key={name} className=\"text-center\">\n          <h5>{ordinalNumbers[i]}</h5>\n          <h3>{name}</h3>\n          <h5 className=\"text-muted\">{count} AC</h5>\n        </Col>\n      ))}\n    </Row>\n  </div>\n);\n\ninterface State {\n  rankings: Ranking[];\n}\n\nclass LanguageOwners extends React.Component<{}, State> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      rankings: []\n    };\n  }\n\n  componentDidMount() {\n    Api.fetchLangRanking().then(entries => {\n      const map: Map<string, { name: string; count: number }[]> = new Map();\n      entries.forEach(entry => {\n        const e = {\n          name: entry.user_id,\n          count: entry.count\n        };\n        const arr = map.get(entry.language);\n        if (arr) {\n          arr.push(e);\n        } else {\n          map.set(entry.language, [e]);\n        }\n      });\n\n      const rankings = Array.from(map).map(([language, ranking]) => ({\n        language,\n        ranking: ranking.sort((a, b) => b.count - a.count)\n      }));\n      this.setState({ rankings });\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.rankings.map(entry => (\n          <OneOwner\n            key={entry.language}\n            language={entry.language}\n            ranking={entry.ranking}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default LanguageOwners;\n","export const ATCODER_USER_REGEXP = /^[0-9a-zA-Z_]+$/;\nexport const ATCODER_RIVALS_REGEXP = /^[a-zA-Z0-9_,]+$/;\nexport const isAccepted = (result: string) => result === \"AC\";\nexport const ordinalSuffixOf = (i: number) => {\n  const j = i % 10;\n  const k = i % 100;\n  if (j == 1 && k != 11) {\n    return \"st\";\n  }\n  if (j == 2 && k != 12) {\n    return \"nd\";\n  }\n  if (j == 3 && k != 13) {\n    return \"rd\";\n  }\n  return \"th\";\n};\n","export function formatDate(epoch_second: number) {\n\tconst date = new Date(epoch_second * 1000);\n\tconst year = date.getFullYear();\n\tconst month = date.getMonth() + 1;\n\tconst day = date.getDate();\n\tconst month_str = month < 10 ? '0' + month : month;\n\tconst day_str = day < 10 ? '0' + day : day;\n\treturn year + '-' + month_str + '-' + day_str;\n}\n","const BASE_URL = 'https://atcoder.jp';\n\nexport const formatContestUrl = (contest: string) => `${BASE_URL}/contests/${contest}`;\n\nexport const formatSubmissionUrl = (id: number, contest: string) => `${formatContestUrl(contest)}/submissions/${id}`;\n\nexport const formatProblemUrl = (problem: string, contest: string) => `${formatContestUrl(contest)}/tasks/${problem}`;\n\nexport const formatSolversUrl = (contest: string, problem: string) =>\n\t`${formatContestUrl(contest)}/submissions?f.Task=${problem}&f.Status=AC`;\n","import React from \"react\";\nimport { BootstrapTable, TableHeaderColumn } from \"react-bootstrap-table\";\nimport {\n  Badge,\n  Row,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem\n} from \"reactstrap\";\n\nimport { isAccepted } from \"../../utils\";\nimport { formatDate } from \"../../utils/DateFormat\";\nimport * as Api from \"../../utils/Api\";\nimport * as Url from \"../../utils/Url\";\nimport MergedProblem from \"../../interfaces/MergedProblem\";\nimport Contest from \"../../interfaces/Contest\";\nimport Submission from \"../../interfaces/Submission\";\nimport SmallTable from \"./SmallTable\";\nimport ButtonGroup from \"reactstrap/lib/ButtonGroup\";\n\nconst INF_POINT = 1e18;\n\nenum StatusFilterState {\n  All = \"All\",\n  Trying = \"Only Trying\",\n  Accepted = \"Only AC\"\n}\n\nenum RatedFilterState {\n  All = \"All\",\n  Rated = \"Only Rated\",\n  Unrated = \"Only Unrated\"\n}\n\ninterface Problem extends MergedProblem {\n  showing_point: number;\n  date: string;\n  contest: Contest;\n  status: string;\n  rivals: string[];\n  last_ac_date: string;\n  showing_performance: number | undefined;\n}\n\ninterface Props {\n  user_ids: string[];\n}\n\ninterface State {\n  problems: Problem[];\n\n  fromPoint: number;\n  toPoint: number;\n  statusFilterState: StatusFilterState;\n  ratedFilterState: RatedFilterState;\n}\n\nclass ListPage extends React.Component<Props, State> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      problems: [],\n      fromPoint: 0,\n      toPoint: INF_POINT,\n      statusFilterState: StatusFilterState.All,\n      ratedFilterState: RatedFilterState.All\n    };\n  }\n\n  componentDidMount() {\n    Promise.all([\n      Api.fetchMergedProblems(),\n      Api.fetchContests(),\n      Api.fetchProblemPerformances()\n    ]).then(([merged_problems, contests, performances]) => {\n      const contestMap = contests.reduce(\n        (map, contest) => map.set(contest.id, contest),\n        new Map<string, Contest>()\n      );\n      const performansMap = performances.reduce(\n        (map, p) => map.set(p.problem_id, p.minimum_performance),\n        new Map<string, number>()\n      );\n\n      const problems: Problem[] = merged_problems.map(problem => {\n        const { point, predict } = problem;\n        const showing_point = point ? point : predict ? predict : INF_POINT;\n\n        const contest = (() => {\n          const contest = contestMap.get(problem.contest_id);\n          if (contest) {\n            return contest;\n          } else {\n            throw `${problem.id} is not belonged to any contest.`;\n          }\n        })();\n        const performance = performansMap.get(problem.id);\n        const showing_performance = performance ? performance : INF_POINT;\n\n        const date = formatDate(contest.start_epoch_second);\n\n        const status = \"\";\n        const rivals: string[] = [];\n        const last_ac_date = \"\";\n\n        return {\n          status,\n          showing_point,\n          contest,\n          date,\n          rivals,\n          last_ac_date,\n          showing_performance,\n          ...problem\n        };\n      });\n\n      problems.sort((a, b) => {\n        if (a.contest.start_epoch_second == b.contest.start_epoch_second) {\n          return b.title.localeCompare(a.title);\n        } else {\n          return b.contest.start_epoch_second - a.contest.start_epoch_second;\n        }\n      });\n\n      this.setState({ problems }, () =>\n        this.updateProblems(this.props.user_ids)\n      );\n    });\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    if (prevProps.user_ids !== this.props.user_ids) {\n      this.updateProblems(this.props.user_ids);\n    }\n  }\n\n  updateProblems(user_ids: string[]) {\n    return Promise.all(user_ids.map(Api.fetchSubmissions))\n      .then(r => r.flat())\n      .then(submissions => {\n        const submission_map = submissions\n          .sort((a, b) => a.epoch_second - b.epoch_second)\n          .reduce((map, submission) => {\n            const arr = map.get(submission.problem_id);\n            if (arr) {\n              arr.push(submission);\n            } else {\n              map.set(submission.problem_id, [submission]);\n            }\n            return map;\n          }, new Map<string, Submission[]>());\n\n        const user = user_ids.length > 0 ? user_ids[0] : \"\";\n        const rivals = this.props.user_ids.slice(1);\n\n        const problems = this.state.problems.map(problem => {\n          const submissions = (() => {\n            const s = submission_map.get(problem.id);\n            return s ? s : [];\n          })();\n\n          const new_status = (() => {\n            const mine = submissions.filter(s => s.user_id === user);\n            if (mine.some(s => isAccepted(s.result))) {\n              return \"AC\";\n            } else if (mine.length > 0) {\n              return mine[mine.length - 1].result;\n            } else {\n              return \"\";\n            }\n          })();\n\n          const new_rivals_set = (() =>\n            submissions\n              .filter(s => rivals.includes(s.user_id))\n              .filter(s => isAccepted(s.result))\n              .reduce(\n                (set, submission) => set.add(submission.user_id),\n                new Set<string>()\n              ))();\n          const new_rivals = Array.from(new_rivals_set).sort();\n          const new_ac_date = (() => {\n            let s = submissions\n              .filter(s => s.user_id === user)\n              .filter(s => isAccepted(s.result))\n              .reverse();\n            if (s.length > 0) {\n              return formatDate(s[0].epoch_second);\n            } else {\n              return \"\";\n            }\n          })();\n          if (\n            new_status !== problem.status ||\n            new_rivals !== problem.rivals ||\n            new_ac_date !== problem.last_ac_date\n          ) {\n            const new_problem = Object.assign({}, problem);\n            new_problem.rivals = new_rivals;\n            new_problem.status = new_status;\n            new_problem.last_ac_date = new_ac_date;\n            return new_problem;\n          } else {\n            return problem;\n          }\n        });\n\n        this.setState({ problems });\n      });\n  }\n\n  render() {\n    const columns: {\n      header: string;\n      dataField: string;\n      dataSort?: boolean;\n      dataAlign?: \"center\";\n      dataFormat?: (cell: any, row: Problem) => JSX.Element;\n      hidden?: boolean;\n    }[] = [\n      {\n        header: \"Date\",\n        dataField: \"date\",\n        dataSort: true\n      },\n      {\n        header: \"Problem\",\n        dataField: \"title\",\n        dataSort: true,\n        dataFormat: (_: string, row: Problem) => (\n          <a\n            href={Url.formatProblemUrl(row.id, row.contest_id)}\n            target=\"_blank\"\n          >\n            {row.title}\n          </a>\n        )\n      },\n      {\n        header: \"Contest\",\n        dataField: \"contest_id\",\n        dataSort: true,\n        dataFormat: (contest_id: string, problem: Problem) => (\n          <a href={Url.formatContestUrl(contest_id)} target=\"_blank\">\n            {problem.contest.title}\n          </a>\n        )\n      },\n      {\n        header: \"Result\",\n        dataField: \"id\",\n        dataAlign: \"center\",\n        dataFormat: (id: string, problem: Problem) => {\n          if (isAccepted(problem.status)) {\n            return <Badge color=\"success\">AC</Badge>;\n          } else if (problem.rivals.length > 0) {\n            return (\n              <div>\n                {problem.rivals.map(r => (\n                  <Badge key={r} color=\"danger\">\n                    {r}\n                  </Badge>\n                ))}\n              </div>\n            );\n          } else {\n            return <Badge color=\"warning\">{problem.status}</Badge>;\n          }\n        }\n      },\n      {\n        header: \"Last AC Date\",\n        dataField: \"last_ac_date\",\n        dataSort: true\n      },\n      {\n        header: \"Solvers\",\n        dataField: \"solver_count\",\n        dataSort: true,\n        dataFormat: (cell: number | null, row: Problem) => (\n          <a\n            href={Url.formatSolversUrl(row.contest_id, row.id)}\n            target=\"_blank\"\n          >\n            {cell}\n          </a>\n        )\n      },\n      {\n        header: \"Point\",\n        dataField: \"showing_point\",\n        dataSort: true,\n        dataFormat: (cell: number) => {\n          if (cell >= INF_POINT) {\n            return <p>-</p>;\n          } else {\n            if (cell % 100 == 0) {\n              return <p>{cell}</p>;\n            } else {\n              return <p>{cell.toFixed(2)}</p>;\n            }\n          }\n        }\n      },\n      {\n        header: \"Difficulty\",\n        dataField: \"showing_performance\",\n        dataSort: true,\n        dataFormat: (cell: number) => {\n          if (cell >= INF_POINT) {\n            return <p>-</p>;\n          } else {\n            return <p>{cell}</p>;\n          }\n        }\n      },\n      {\n        header: \"Fastest\",\n        dataField: \"execution_time\",\n        dataSort: true,\n        dataFormat: (_: number, row: Problem) => {\n          const {\n            fastest_submission_id,\n            fastest_contest_id,\n            fastest_user_id,\n            execution_time\n          } = row;\n          if (\n            fastest_submission_id != null &&\n            fastest_contest_id != null &&\n            fastest_user_id != null &&\n            execution_time != null\n          ) {\n            return (\n              <a\n                href={Url.formatSubmissionUrl(\n                  fastest_submission_id,\n                  fastest_contest_id\n                )}\n                target=\"_blank\"\n              >\n                {fastest_user_id} ({execution_time} ms)\n              </a>\n            );\n          } else {\n            return <p />;\n          }\n        }\n      },\n      {\n        header: \"Shortest\",\n        dataField: \"source_code_length\",\n        dataSort: true,\n        dataFormat: (_: number, row: Problem) => {\n          const {\n            shortest_submission_id,\n            shortest_contest_id,\n            shortest_user_id,\n            source_code_length\n          } = row;\n          if (\n            shortest_contest_id != null &&\n            shortest_submission_id != null &&\n            shortest_user_id != null &&\n            source_code_length != null\n          ) {\n            return (\n              <a\n                href={Url.formatSubmissionUrl(\n                  shortest_submission_id,\n                  shortest_contest_id\n                )}\n                target=\"_blank\"\n              >\n                {shortest_user_id} ({source_code_length} Bytes)\n              </a>\n            );\n          } else {\n            return <p />;\n          }\n        }\n      },\n      {\n        header: \"First\",\n        dataField: \"first_user_id\",\n        dataSort: true,\n        dataFormat: (_: string, row: Problem) => {\n          const { first_submission_id, first_contest_id, first_user_id } = row;\n          if (\n            first_submission_id != null &&\n            first_contest_id != null &&\n            first_user_id != null\n          ) {\n            return (\n              <a\n                href={Url.formatSubmissionUrl(\n                  first_submission_id,\n                  first_contest_id\n                )}\n                target=\"_blank\"\n              >\n                {first_user_id}\n              </a>\n            );\n          } else {\n            return <p />;\n          }\n        }\n      },\n      {\n        header: \"Shortest User for Search\",\n        dataField: \"shortest_user_id\",\n        hidden: true\n      },\n      {\n        header: \"Fastest User for Search\",\n        dataField: \"fastest_user_id\",\n        hidden: true\n      }\n    ];\n\n    const point_set = this.state.problems.reduce((set, p) => {\n      if (p.point) {\n        return set.add(p.point);\n      } else {\n        return set;\n      }\n    }, new Set<number>());\n    const points = Array.from(point_set).sort((a, b) => a - b);\n    return (\n      <div>\n        <Row className=\"my-2 border-bottom\">\n          <h1>Point Status</h1>\n        </Row>\n        <Row>\n          <SmallTable\n            problems={this.state.problems}\n            user_id={this.props.user_ids[0]}\n          />\n        </Row>\n\n        <Row className=\"my-2 border-bottom\">\n          <h1>Problem List</h1>\n        </Row>\n        <Row>\n          <ButtonGroup className=\"mr-4\">\n            <UncontrolledDropdown>\n              <DropdownToggle caret>\n                {this.state.fromPoint == 0 ? \"From\" : this.state.fromPoint}\n              </DropdownToggle>\n              <DropdownMenu>\n                {points.map(p => (\n                  <DropdownItem\n                    key={p}\n                    onClick={() => this.setState({ fromPoint: p })}\n                  >\n                    {p}\n                  </DropdownItem>\n                ))}\n              </DropdownMenu>\n            </UncontrolledDropdown>\n            <UncontrolledDropdown>\n              <DropdownToggle caret>\n                {this.state.toPoint == INF_POINT ? \"To\" : this.state.toPoint}\n              </DropdownToggle>\n              <DropdownMenu>\n                {points.map(p => (\n                  <DropdownItem\n                    key={p}\n                    onClick={() => this.setState({ toPoint: p })}\n                  >\n                    {p}\n                  </DropdownItem>\n                ))}\n              </DropdownMenu>\n            </UncontrolledDropdown>\n          </ButtonGroup>\n          <ButtonGroup className=\"mr-4\">\n            <UncontrolledDropdown>\n              <DropdownToggle caret>\n                {this.state.statusFilterState}\n              </DropdownToggle>\n              <DropdownMenu>\n                <DropdownItem\n                  onClick={() =>\n                    this.setState({ statusFilterState: StatusFilterState.All })\n                  }\n                >\n                  {StatusFilterState.All}\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() =>\n                    this.setState({\n                      statusFilterState: StatusFilterState.Trying\n                    })\n                  }\n                >\n                  {StatusFilterState.Trying}\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() =>\n                    this.setState({\n                      statusFilterState: StatusFilterState.Accepted\n                    })\n                  }\n                >\n                  {StatusFilterState.Accepted}\n                </DropdownItem>\n              </DropdownMenu>\n            </UncontrolledDropdown>\n          </ButtonGroup>\n          <ButtonGroup className=\"mr-4\">\n            <UncontrolledDropdown>\n              <DropdownToggle caret>\n                {this.state.ratedFilterState}\n              </DropdownToggle>\n              <DropdownMenu>\n                <DropdownItem\n                  onClick={() =>\n                    this.setState({ ratedFilterState: RatedFilterState.All })\n                  }\n                >\n                  {RatedFilterState.All}\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() =>\n                    this.setState({ ratedFilterState: RatedFilterState.Rated })\n                  }\n                >\n                  {RatedFilterState.Rated}\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() =>\n                    this.setState({\n                      ratedFilterState: RatedFilterState.Unrated\n                    })\n                  }\n                >\n                  {RatedFilterState.Unrated}\n                </DropdownItem>\n              </DropdownMenu>\n            </UncontrolledDropdown>\n          </ButtonGroup>\n        </Row>\n        <Row>\n          <BootstrapTable\n            pagination\n            keyField=\"id\"\n            height=\"auto\"\n            hover\n            striped\n            search\n            trClassName={(problem: Problem) => {\n              if (isAccepted(problem.status)) {\n                return \"table-success\";\n              } else if (problem.rivals.length > 0) {\n                return \"table-danger\";\n              } else if (problem.status.length > 0) {\n                return \"table-warning\";\n              } else {\n                return \"\";\n              }\n            }}\n            data={this.state.problems\n              .filter(({ point, predict }) => {\n                if (point) {\n                  return (\n                    this.state.fromPoint <= point && point <= this.state.toPoint\n                  );\n                } else if (predict) {\n                  return (\n                    this.state.fromPoint <= predict &&\n                    predict <= this.state.toPoint\n                  );\n                } else {\n                  return this.state.toPoint == INF_POINT;\n                }\n              })\n              .filter(({ status }) => {\n                switch (this.state.statusFilterState) {\n                  case StatusFilterState.All:\n                    return true;\n                  case StatusFilterState.Trying:\n                    return !isAccepted(status);\n                  case StatusFilterState.Accepted:\n                    return isAccepted(status);\n                }\n              })\n              .filter(({ point }) => {\n                switch (this.state.ratedFilterState) {\n                  case RatedFilterState.All:\n                    return true;\n                  case RatedFilterState.Rated:\n                    return point && point != null;\n                  case RatedFilterState.Unrated:\n                    return !point;\n                }\n              })}\n            options={{\n              paginationPosition: \"top\",\n              sizePerPage: 20,\n              sizePerPageList: [\n                {\n                  text: \"20\",\n                  value: 20\n                },\n                {\n                  text: \"50\",\n                  value: 50\n                },\n                {\n                  text: \"100\",\n                  value: 100\n                },\n                {\n                  text: \"200\",\n                  value: 200\n                },\n                {\n                  text: \"All\",\n                  value: this.state.problems.length\n                }\n              ]\n            }}\n          >\n            {columns.map(c => (\n              <TableHeaderColumn key={c.header} {...c}>\n                {c.header}\n              </TableHeaderColumn>\n            ))}\n          </BootstrapTable>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default ListPage;\n","import React from \"react\";\nimport { isAccepted } from \"../../utils\";\nimport Table from \"reactstrap/lib/Table\";\nimport Row from \"reactstrap/lib/Row\";\n\ninterface Props {\n  problems: { point?: number | null; rivals: string[]; status: string }[];\n  user_id: string | undefined;\n}\n\nconst SmallTable = ({ problems, user_id }: Props) => {\n  const point_count_map = new Map<number, number>();\n  const user_count_map = new Map<string, Map<number, number>>();\n  problems.forEach(p => {\n    if (p.point) {\n      const count = point_count_map.get(p.point);\n      if (count) {\n        point_count_map.set(p.point, count + 1);\n      } else {\n        point_count_map.set(p.point, 1);\n      }\n      if (isAccepted(p.status) && user_id) {\n        const map = user_count_map.get(user_id);\n        if (map) {\n          const count = map.get(p.point);\n          if (count) {\n            map.set(p.point, count + 1);\n          } else {\n            map.set(p.point, 1);\n          }\n        } else {\n          const m = new Map<number, number>();\n          m.set(p.point, 1);\n          user_count_map.set(user_id, m);\n        }\n      }\n    }\n  });\n\n  const point_count = Array.from(point_count_map)\n    .map(([point, count]) => ({ point, count }))\n    .sort((a, b) => a.point - b.point);\n\n  const user_count = Array.from(user_count_map).map(([user_id, map]) => ({\n    user_id,\n    map\n  }));\n\n  return (\n    <Table striped bordered hover responsive>\n      <thead>\n        <tr>\n          <th>Point</th>\n          {point_count.map(({ point }) => (\n            <th key={point}>{point}</th>\n          ))}\n        </tr>\n        <tr>\n          <th>Total</th>\n          {point_count.map(({ point, count }) => (\n            <th key={point}>{count}</th>\n          ))}\n        </tr>\n      </thead>\n      <tbody>\n        {user_count.map(({ map, user_id }) => (\n          <tr key={user_id}>\n            <td>{user_id}</td>\n            {point_count.map(({ point }) => {\n              const count = map.get(point);\n              if (count != undefined) {\n                return <td key={point}>{count}</td>;\n              } else {\n                return <td key={point}>0</td>;\n              }\n            })}\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  );\n};\n\nexport default SmallTable;\n","import React from 'react';\nimport { ButtonGroup, Button, Row } from 'reactstrap';\n\nimport CalendarHeatmap from '../../components/CalendarHeatmap';\nimport Submission from '../../interfaces/Submission';\nimport { isAccepted } from '../../utils';\n\nenum FilterStatus {\n\tAllSubmissions,\n\tAllAccepted,\n\tUniqueAccepted\n}\n\ninterface Props {\n\tsubmissions: Submission[];\n}\n\ninterface State {\n\tfilter_status: FilterStatus;\n}\n\nclass FilteringHeatmap extends React.Component<Props, State> {\n\tconstructor(props: Props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tfilter_status: FilterStatus.AllSubmissions\n\t\t};\n\t}\n\n\trender() {\n\t\tconst filtered_submissions = ((filter_status: FilterStatus) => {\n\t\t\tswitch (filter_status) {\n\t\t\t\tcase FilterStatus.AllSubmissions:\n\t\t\t\t\treturn this.props.submissions;\n\t\t\t\tcase FilterStatus.AllAccepted:\n\t\t\t\t\treturn this.props.submissions.filter((s) => isAccepted(s.result));\n\t\t\t\tcase FilterStatus.UniqueAccepted:\n\t\t\t\t\tconst map = this.props.submissions\n\t\t\t\t\t\t.filter((s) => isAccepted(s.result))\n\t\t\t\t\t\t.sort((a, b) => b.epoch_second - a.epoch_second)\n\t\t\t\t\t\t.reduce((map, s) => map.set(s.problem_id, s), new Map<string, Submission>());\n\t\t\t\t\treturn Array.from(map.values());\n\t\t\t\tdefault:\n\t\t\t\t\tthrow 'unreachable';\n\t\t\t}\n\t\t})(this.state.filter_status);\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Row className=\"my-3\">\n\t\t\t\t\t<ButtonGroup>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tonClick={() => this.setState({ filter_status: FilterStatus.AllSubmissions })}\n\t\t\t\t\t\t\tactive={this.state.filter_status === FilterStatus.AllSubmissions}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tAll Submissions\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tonClick={() => this.setState({ filter_status: FilterStatus.AllAccepted })}\n\t\t\t\t\t\t\tactive={this.state.filter_status === FilterStatus.AllAccepted}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tAll AC\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tonClick={() => this.setState({ filter_status: FilterStatus.UniqueAccepted })}\n\t\t\t\t\t\t\tactive={this.state.filter_status === FilterStatus.UniqueAccepted}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tUnique AC\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</ButtonGroup>\n\t\t\t\t</Row>\n\t\t\t\t<Row className=\"my-5\">\n\t\t\t\t\t<CalendarHeatmap\n\t\t\t\t\t\tdata={filtered_submissions.map((s) => new Date(s.epoch_second * 1000))}\n\t\t\t\t\t\tformatTooltip={(date: string, count: number) => {\n\t\t\t\t\t\t\tlet unit = '';\n\t\t\t\t\t\t\tif (this.state.filter_status === FilterStatus.AllAccepted) {\n\t\t\t\t\t\t\t\tunit = 'AC';\n\t\t\t\t\t\t\t} else if (this.state.filter_status == FilterStatus.AllSubmissions) {\n\t\t\t\t\t\t\t\tunit = 'Submissions';\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tunit = 'Unique AC';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn `${date} ${count} ${unit}`;\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t</Row>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default FilteringHeatmap;\n","import React from 'react';\nimport { Row } from 'reactstrap';\nimport { XAxis, YAxis, CartesianGrid, Tooltip, LineChart, Line, ResponsiveContainer } from 'recharts';\n\nimport { formatDate } from '../../utils/DateFormat';\n\nconst ClimbingLineChart = ({ climbing_data }: { climbing_data: { date: number; count: number }[] }) => (\n\t<Row className=\"my-3\">\n\t\t<ResponsiveContainer width=\"100%\" height={300}>\n\t\t\t<LineChart\n\t\t\t\tdata={climbing_data}\n\t\t\t\tmargin={{\n\t\t\t\t\ttop: 5,\n\t\t\t\t\tright: 30,\n\t\t\t\t\tleft: 20,\n\t\t\t\t\tbottom: 5\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<CartesianGrid strokeDasharray=\"3 3\" />\n\t\t\t\t<XAxis\n\t\t\t\t\tdataKey=\"date\"\n\t\t\t\t\ttype=\"number\"\n\t\t\t\t\tdomain={[ 'dataMin', 'dataMax' ]}\n\t\t\t\t\ttickFormatter={(ms: number) => formatDate(ms / 1000)}\n\t\t\t\t/>\n\t\t\t\t<YAxis />\n\t\t\t\t<Tooltip labelFormatter={(v: any) => formatDate(v / 1000)} />\n\t\t\t\t<Line dataKey=\"count\" stroke=\"#8884d8\" />\n\t\t\t</LineChart>\n\t\t</ResponsiveContainer>\n\t</Row>\n);\nexport default ClimbingLineChart;\n","import React from \"react\";\nimport { Row } from \"reactstrap\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer\n} from \"recharts\";\n\nimport { formatDate } from \"../../utils/DateFormat\";\n\nconst DailyEffortBarChart = ({\n  daily_data\n}: {\n  daily_data: { date: number; count: number }[];\n}) => (\n  <Row className=\"my-3\">\n    <ResponsiveContainer width=\"100%\" height={300}>\n      <BarChart\n        data={daily_data}\n        margin={{\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 5\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis\n          dataKey=\"date\"\n          type=\"number\"\n          domain={[\"dataMin\", \"dataMax\"]}\n          tickFormatter={(ms: number) => formatDate(ms / 1000)}\n        />\n        <YAxis />\n        <Tooltip labelFormatter={(v: any) => formatDate(v / 1000)} />\n        <Bar dataKey=\"count\" fill=\"#8884d8\" />\n      </BarChart>\n    </ResponsiveContainer>\n  </Row>\n);\n\nexport default DailyEffortBarChart;\n","import React from \"react\";\nimport {\n  PieChart,\n  Pie,\n  ResponsiveContainer,\n  Cell,\n  Tooltip,\n  Legend\n} from \"recharts\";\n\nconst COLORS = {\n  Accepted: \"#32cd32\",\n  Trying: \"#58616a\"\n};\n\nconst SmallPieChart = ({\n  title,\n  trying,\n  accepted\n}: {\n  title: string;\n  trying: number;\n  accepted: number;\n}) => {\n  const data = [\n    { value: accepted, color: COLORS.Accepted, name: \"Accepted\" },\n    { value: trying, color: COLORS.Trying, name: \"Trying\" }\n  ];\n  return (\n    <div>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <PieChart>\n          <Pie dataKey=\"value\" data={data} outerRadius=\"80%\" fill=\"#ff0000\">\n            {data.map((e, i) => (\n              <Cell key={e.name} fill={e.color} />\n            ))}\n          </Pie>\n          <Tooltip />\n          <Legend />\n        </PieChart>\n      </ResponsiveContainer>\n      <h5>{title}</h5>\n      <h5 className=\"text-muted\">{`${accepted} / ${accepted + trying}`}</h5>\n    </div>\n  );\n};\n\nexport default SmallPieChart;\n","import React from 'react';\nimport { UncontrolledTooltip } from 'reactstrap';\n\nconst WEEKDAY = 7;\nconst WEEKS = 53;\nconst COLORS = ['#ebedf0', '#c6e48b', '#7bc96f', '#239a3b', '#196127'];\n\nconst formatDate = (date: Date) => {\n  const year = date.getFullYear();\n  const month = date.getMonth() + 1;\n  const day = date.getDate();\n  const month_str = month < 10 ? '0' + month : month;\n  const day_str = day < 10 ? '0' + day : day;\n  return year + '-' + month_str + '-' + day_str;\n};\n\nconst CalendarHeatmap = (props: { data: Date[]; formatTooltip?: (date: string, count: number) => string }) => {\n  const next_sunday = new Date();\n  next_sunday.setDate(next_sunday.getDate() + (WEEKDAY - next_sunday.getDay()));\n\n  const current_date = new Date(next_sunday);\n  current_date.setDate(current_date.getDate() - WEEKS * WEEKDAY);\n\n  const count_map = new Map<string, number>();\n  while (formatDate(current_date) !== formatDate(next_sunday)) {\n    count_map.set(formatDate(current_date), 0);\n    current_date.setDate(current_date.getDate() + 1);\n  }\n\n  props.data.forEach((date) => {\n    const count = count_map.get(formatDate(date));\n    if (count !== undefined) {\n      count_map.set(formatDate(date), count + 1);\n    }\n  });\n\n  const table_data = Array.from(count_map)\n    .map(([date, count]) => ({ count, date }))\n    .sort((a, b) => a.date.localeCompare(b.date));\n\n  const block_width = 10;\n  const width = block_width * WEEKS;\n  const height = block_width * WEEKDAY;\n  return (\n    <div style={{ width: \"100%\" }}>\n      <svg viewBox={`0 0 ${width} ${height}`} style={{ width: \"100%\" }}>\n        {table_data.map(({ date, count }, i) => {\n          const color = COLORS[Math.min(count, COLORS.length - 1)];\n          const week = Math.floor(i / WEEKDAY);\n          const day = i % WEEKDAY;\n          return (\n            <rect\n              key={date}\n              id={`rect-${date}`}\n              x={week * block_width}\n              y={day * block_width}\n              width={block_width}\n              height={block_width}\n              fill={color}\n            />\n          );\n        })}\n      </svg>\n\n      {table_data.map(({ date, count }) => (\n        <UncontrolledTooltip delay={{ show: 0, hide: 0 }} key={date} placement=\"right\" target={`rect-${date}`}>\n          {props.formatTooltip ? props.formatTooltip(date, count) : `${date}: ${count}`}\n        </UncontrolledTooltip>\n      ))}\n    </div>\n  );\n};\n\nexport default CalendarHeatmap;\n","import React from \"react\";\nimport { Row, Table } from \"reactstrap\";\nimport { BootstrapTable, TableHeaderColumn } from \"react-bootstrap-table\";\nimport { isAccepted } from \"../utils\";\n\nimport * as Api from \"../utils/Api\";\nimport * as Url from \"../utils/Url\";\nimport Contest from \"../interfaces/Contest\";\nimport Problem from \"../interfaces/Problem\";\n\nenum Status {\n  Nothing = 0,\n  Trying = 1,\n  RivalSolved = 2,\n  Solved = 3\n}\n\nconst get_table_class = (status: Status) => {\n  switch (status) {\n    case Status.Nothing:\n      return \"\";\n    case Status.Solved:\n      return \"table-success\";\n    case Status.Trying:\n      return \"table-warning\";\n    case Status.RivalSolved:\n      return \"table-danger\";\n  }\n};\n\ntype ContestWithProblemIds = { contest: Contest; problemIds: string[] };\n\ninterface ProblemWithStatus extends Problem {\n  status: Status;\n}\n\ninterface Props {\n  user_ids: string[];\n}\n\ninterface State {\n  contests: ContestWithProblemIds[];\n  problems: Map<string, ProblemWithStatus>;\n}\n\nclass TablePage extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      contests: [],\n      problems: new Map()\n    };\n  }\n\n  componentDidMount() {\n    Promise.all([\n      Api.fetchProblems(),\n      Api.fetchContests(),\n      Api.fetchContestProblemPairs()\n    ]).then(([problems, contests, edges]) => {\n      const graph = edges.reduce((map, edge) => {\n        const list = map.get(edge.contest_id);\n        if (list) {\n          list.push(edge.problem_id);\n        } else {\n          map.set(edge.contest_id, [edge.problem_id]);\n        }\n        return map;\n      }, new Map<string, string[]>());\n\n      const problemsMap = problems\n        .map(p => ({ status: Status.Nothing, ...p }))\n        .reduce(\n          (map, p) => map.set(p.id, p),\n          new Map<string, ProblemWithStatus>()\n        );\n\n      const contestsWithProblemIds = contests.map(contest => {\n        const problemIds = graph.get(contest.id);\n        if (problemIds) {\n          return { contest, problemIds };\n        } else {\n          return { contest, problemIds: [] };\n        }\n      });\n\n      this.setState(\n        { contests: contestsWithProblemIds, problems: problemsMap },\n        () => {\n          this.updateState(this.props.user_ids);\n        }\n      );\n    });\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (this.props !== prevProps) {\n      this.updateState(this.props.user_ids);\n    }\n  }\n\n  updateState(user_ids: string[]) {\n    const user = user_ids.length > 0 ? user_ids[0] : \"\";\n    const rivals = user_ids.slice(1);\n\n    Promise.all(user_ids.map(user_id => Api.fetchSubmissions(user_id)))\n      .then(r => r.flat())\n      .then(submissions =>\n        submissions\n          .filter(\n            s =>\n              s.user_id === user ||\n              (rivals.includes(s.user_id) && isAccepted(s.result))\n          )\n          .map(({ problem_id, user_id, result }) => {\n            if (user_id === user) {\n              if (isAccepted(result)) {\n                return { problem_id, status: Status.Solved };\n              } else {\n                return { problem_id, status: Status.Trying };\n              }\n            } else {\n              return { problem_id, status: Status.RivalSolved };\n            }\n          })\n          .sort((a, b) => a.status - b.status)\n          .reduce(\n            (map, s) => map.set(s.problem_id, s.status),\n            new Map<string, Status>()\n          )\n      )\n      .then(map => {\n        const problems = Array.from(this.state.problems.values())\n          .map(p => {\n            const status = map.get(p.id);\n            const problem = Object.assign({}, p);\n            problem.status = Status.Nothing;\n            if (status !== undefined) {\n              problem.status = status;\n            }\n            return problem;\n          })\n          .reduce(\n            (map, p) => map.set(p.id, p),\n            new Map<string, ProblemWithStatus>()\n          );\n        this.setState({ problems });\n      });\n  }\n\n  render() {\n    const { problems, contests } = this.state;\n    const contestsWithProblems = contests\n      .map(({ contest, problemIds }) => {\n        const problemList: ProblemWithStatus[] = [];\n        problemIds\n          .map(id => problems.get(id))\n          .forEach(problem => {\n            if (problem) {\n              problemList.push(problem);\n            }\n          });\n        return {\n          problems: problemList.sort((a, b) => a.title.localeCompare(b.title)),\n          ...contest\n        };\n      })\n      .sort((a, b) => b.start_epoch_second - a.start_epoch_second);\n\n    const abc = contestsWithProblems.filter(({ id }) => id.match(/^abc\\d{3}$/));\n    const arc = contestsWithProblems.filter(({ id }) => id.match(/^arc\\d{3}$/));\n    const agc = contestsWithProblems.filter(({ id }) => id.match(/^agc\\d{3}$/));\n    const others = contestsWithProblems.filter(({ id }) =>\n      id.match(/^(?!a[rgb]c\\d{3}).*$/)\n    );\n\n    return (\n      <div>\n        <AtCoderRegularTable contests={abc} title=\"AtCoder Beginner Contest\" />\n        <AtCoderRegularTable contests={arc} title=\"AtCoder Regular Contest\" />\n        <AtCoderRegularTable contests={agc} title=\"AtCoder Grand Contest\" />\n\n        <Row className=\"my-4\">\n          <h2>Other Contests</h2>\n        </Row>\n        <ContestTable contests={others} />\n      </div>\n    );\n  }\n}\n\nconst ContestTable = ({\n  contests\n}: {\n  contests: { id: string; title: string; problems: ProblemWithStatus[] }[];\n}) => (\n  <div>\n    {contests.map(({ id, title, problems }) => (\n      <div key={id}>\n        <strong>\n          <a target=\"_blank\" href={Url.formatContestUrl(id)}>\n            {title}\n          </a>\n        </strong>\n        <Table striped bordered hover responsive>\n          <tbody>\n            <tr>\n              {problems\n                .sort((a, b) => a.title.localeCompare(b.title))\n                .map(p => (\n                  <td key={p.id} className={get_table_class(p.status)}>\n                    <a\n                      target=\"_blank\"\n                      href={Url.formatProblemUrl(p.id, p.contest_id)}\n                    >\n                      {p.title}\n                    </a>\n                  </td>\n                ))}\n            </tr>\n          </tbody>\n        </Table>\n      </div>\n    ))}\n  </div>\n);\n\nconst AtCoderRegularTable = ({\n  contests,\n  title\n}: {\n  contests: { id: string; problems: ProblemWithStatus[] }[];\n  title: string;\n}) => {\n  const max_problem_count = contests\n    .map(c => c.problems.length)\n    .reduce((current, count) => Math.max(current, count), 0);\n  const problem_heads = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"F2\"].slice(\n    0,\n    max_problem_count\n  );\n\n  return (\n    <Row className=\"my-4\">\n      <h2>{title}</h2>\n      <BootstrapTable data={contests}>\n        <TableHeaderColumn\n          isKey\n          dataField=\"id\"\n          dataFormat={(\n            _: any,\n            row: { id: string; problems: ProblemWithStatus[] }\n          ) => (\n            <a href={Url.formatContestUrl(row.id)} target=\"_blank\">\n              {row.id.toUpperCase()}\n            </a>\n          )}\n        >\n          Contest\n        </TableHeaderColumn>\n        {problem_heads.map((c, i) => (\n          <TableHeaderColumn\n            dataField={c}\n            key={c}\n            columnClassName={(\n              _: any,\n              { problems }: { problems: ProblemWithStatus[] }\n            ) => {\n              const problem = problems[i];\n              if (problem) {\n                return get_table_class(problems[i].status);\n              } else {\n                return \"\";\n              }\n            }}\n            dataFormat={(\n              _: any,\n              { id, problems }: { id: string; problems: ProblemWithStatus[] }\n            ) => {\n              const problem = problems[i];\n              if (problem) {\n                return (\n                  <a\n                    href={Url.formatProblemUrl(problems[i].id, id)}\n                    target=\"_blank\"\n                  >\n                    {problems[i].title}\n                  </a>\n                );\n              } else {\n                return \"-\";\n              }\n            }}\n          >\n            {c}\n          </TableHeaderColumn>\n        ))}\n      </BootstrapTable>\n    </Row>\n  );\n};\n\nexport default TablePage;\n","import React from \"react\";\nimport { BootstrapTable, TableHeaderColumn } from \"react-bootstrap-table\";\n\nimport Submission from \"../../interfaces/Submission\";\nimport { formatDate } from \"../../utils/DateFormat\";\nimport * as Url from \"../../utils/Url\";\nimport { isAccepted } from \"../../utils\";\nimport { Badge } from \"reactstrap\";\n\nconst SubmissionList = ({\n  submissions,\n  problems\n}: {\n  submissions: Submission[];\n  problems: { id: string; title: string }[];\n}) => {\n  const title_map = problems.reduce(\n    (map, p) => map.set(p.id, p.title),\n    new Map<string, string>()\n  );\n\n  let verdictOptions: any = {};\n  submissions\n    .reduce((set, s) => set.add(s.result), new Set<string>())\n    .forEach((verdict, index) => {\n      verdictOptions[index] = verdict;\n    });\n  return (\n    <BootstrapTable\n      data={submissions\n        .sort((a, b) => b.epoch_second - a.epoch_second)\n        .map(s => ({ title: title_map.get(s.problem_id), ...s }))}\n      keyField=\"id\"\n      height=\"auto\"\n      hover\n      striped\n      search\n      pagination\n      options={{\n        paginationPosition: \"top\",\n        sizePerPage: 20,\n        sizePerPageList: [\n          {\n            text: \"20\",\n            value: 20\n          },\n          {\n            text: \"50\",\n            value: 50\n          },\n          {\n            text: \"100\",\n            value: 100\n          },\n          {\n            text: \"200\",\n            value: 200\n          },\n          {\n            text: \"All\",\n            value: submissions.length\n          }\n        ]\n      }}\n    >\n      <TableHeaderColumn\n        dataSort\n        dataField=\"epoch_second\"\n        dataFormat={(second: number) => formatDate(second)}\n      >\n        Date\n      </TableHeaderColumn>\n      <TableHeaderColumn\n        filterFormatted\n        dataSort\n        dataField=\"problem_id\"\n        dataFormat={(_: string, { problem_id, contest_id }: Submission) => (\n          <a\n            target=\"_blank\"\n            href={Url.formatProblemUrl(problem_id, contest_id)}\n          >\n            {title_map.get(problem_id)}\n          </a>\n        )}\n      >\n        Problem\n      </TableHeaderColumn>\n      <TableHeaderColumn\n        dataSort\n        filter={{ type: \"SelectFilter\", options: verdictOptions }}\n        dataField=\"result\"\n        dataAlign=\"center\"\n        dataFormat={result =>\n          isAccepted(result) ? (\n            <Badge color=\"success\">{result}</Badge>\n          ) : (\n            <Badge color=\"warning\">{result}</Badge>\n          )\n        }\n      >\n        Status\n      </TableHeaderColumn>\n      <TableHeaderColumn dataSort dataField=\"language\">\n        Language\n      </TableHeaderColumn>\n      <TableHeaderColumn\n        dataSort\n        dataField=\"id\"\n        dataFormat={(_: number, { id, contest_id }: Submission) => (\n          <a target=\"_blank\" href={Url.formatSubmissionUrl(id, contest_id)}>\n            Detail\n          </a>\n        )}\n      >\n        Detail\n      </TableHeaderColumn>\n      <TableHeaderColumn dataField=\"title\" hidden />\n    </BootstrapTable>\n  );\n};\n\nexport default SubmissionList;\n","import React from 'react';\nimport { Row, Col } from 'reactstrap';\nimport Submission from '../../interfaces/Submission';\nimport { isAccepted } from '../../utils';\n\nconst LanguageCount = ({ submissions }: { submissions: Submission[] }) => {\n  const language_map = submissions.filter((s) => isAccepted(s.result)).reduce((map, submission) => {\n    const language = submission.language.replace(/\\d* \\(.*\\)$/, '');\n    const problems = map.get(language);\n    if (problems) {\n      problems.add(submission.problem_id);\n    } else {\n      map.set(language, new Set([submission.problem_id]));\n    }\n    return map;\n  }, new Map<string, Set<string>>());\n  const language_count = Array.from(language_map)\n    .map(([language, set]) => ({ language, count: set.size }))\n    .sort((a, b) => a.language.localeCompare(b.language));\n  return (\n    <Row>\n      {language_count.map(({ language, count }) => (\n        <Col key={language} className=\"text-center my-3\" md=\"3\" xs=\"6\">\n          <h6>{language}</h6>\n          <h3>{count}</h3>\n        </Col>\n      ))}\n    </Row>\n  );\n};\n\nexport default LanguageCount;\n","import React from \"react\";\n\nimport { isAccepted } from \"../../utils\";\nimport { BootstrapTable, TableHeaderColumn } from \"react-bootstrap-table\";\nimport Contest from \"../../interfaces/Contest\";\nimport * as Url from \"../../utils/Url\";\n\nconst TOP_PERFORMANCES = 50;\nconst RECOMMEND_NUM = 10;\n\nconst Recommendations = ({\n  submissions,\n  problems,\n  contests,\n  performances\n}: {\n  submissions: { result: string; problem_id: string; epoch_second: number }[];\n  problems: { id: string; title: string; contest_id: string }[];\n  contests: Contest[];\n  performances: { problem_id: string; minimum_performance: number }[];\n}) => {\n  if (submissions.length == 0) {\n    return null;\n  }\n  const performance_map = performances.reduce(\n    (map, { problem_id, minimum_performance }) =>\n      map.set(problem_id, minimum_performance),\n    new Map<string, number>()\n  );\n\n  const contest_map = contests.reduce(\n    (map, contest) => map.set(contest.id, contest),\n    new Map<string, Contest>()\n  );\n\n  const accepted_problem_ids = submissions\n    .filter(({ result }) => isAccepted(result))\n    .sort((a, b) => b.epoch_second - a.epoch_second)\n    .map(s => s.problem_id);\n  const accepted_problem_id_set = new Set(accepted_problem_ids);\n  const accepted_problem_performances = Array.from(accepted_problem_id_set)\n    .map(id => performance_map.get(id))\n    .filter(p => p !== undefined) as number[];\n  accepted_problem_performances.sort((a, b) => b - a);\n  const top_last_index =\n    Math.min(\n      Math.ceil(accepted_problem_performances.length / 5.0),\n      TOP_PERFORMANCES\n    ) - 1;\n  const predicted_performance = accepted_problem_performances[top_last_index];\n\n  console.log(accepted_problem_performances);\n  console.log(predicted_performance);\n\n  const recommended_problems = problems\n    .filter(({ id }) => !accepted_problem_id_set.has(id))\n    .filter(({ id }) => performance_map.has(id))\n    .sort((a, b) => {\n      const pa = performance_map.get(a.id) as number;\n      const pb = performance_map.get(b.id) as number;\n      const da = Math.abs(pa - predicted_performance);\n      const db = Math.abs(pb - predicted_performance);\n      return da - db;\n    })\n    .slice(0, RECOMMEND_NUM)\n    .map(p => Object.assign({\n      difficulty: performance_map.get(p.id) as number,\n      contest: contest_map.get(p.contest_id) as Contest\n    }, p))\n    .sort((a, b) => b.difficulty - a.difficulty);\n\n  return (\n    <BootstrapTable\n      data={recommended_problems}\n      keyField=\"id\"\n      height=\"auto\"\n      hover\n      striped\n    >\n      <TableHeaderColumn\n        dataField=\"title\"\n        dataFormat={(\n          title: string,\n          { id, contest_id }: { id: string; contest_id: string }\n        ) => (\n          <a target=\"_blank\" href={Url.formatProblemUrl(id, contest_id)}>\n            {title}\n          </a>\n        )}\n      >\n        Problem\n      </TableHeaderColumn>\n      <TableHeaderColumn\n        dataField=\"contest\"\n        dataFormat={(\n          {id, title}: {id: string, title: string}\n        ) => (\n          <a href={Url.formatContestUrl(id)} target=\"_blank\">\n            {title}\n          </a>\n        )}\n      >\n        Contest\n      </TableHeaderColumn>\n      <TableHeaderColumn\n        dataField=\"difficulty\"\n      >\n        Difficulty\n      </TableHeaderColumn>\n    </BootstrapTable>\n  );\n};\n\nexport default Recommendations;\n","import React from \"react\";\nimport { Row, Col } from \"reactstrap\";\n\nimport * as Api from \"../../utils/Api\";\nimport Submission from \"../../interfaces/Submission\";\nimport UserInfo from \"../../interfaces/UserInfo\";\nimport MergedProblem from \"../../interfaces/MergedProblem\";\nimport Contest from \"../../interfaces/Contest\";\nimport { ordinalSuffixOf, isAccepted } from \"../../utils\";\nimport { formatDate } from \"../../utils/DateFormat\";\n\nimport ClimbingLineChart from \"./ClimbingLineChart\";\nimport DailyEffortBarChart from \"./DailyEffortBarChart\";\nimport SmallPieChart from \"./SmallPieChart\";\nimport FilteringHeatmap from \"./FilteringHeatmap\";\nimport SubmissionList from \"./SubmissionList\";\nimport LanguageCount from \"./LanguageCount\";\nimport Recommendations from \"./Recommendations\";\n\ninterface Props {\n  user_ids: string[];\n}\n\ninterface RankingEntry {\n  problem_count: number;\n  user_id: string;\n}\n\ninterface State {\n  first_ranking: RankingEntry[];\n  fast_ranking: RankingEntry[];\n  short_ranking: RankingEntry[];\n\n  problems: MergedProblem[];\n  submissions: Submission[];\n  user_info: UserInfo;\n  contests: Contest[];\n\n  problem_performances: { problem_id: string; minimum_performance: number }[];\n\n  current_streak: number;\n  longest_streak: number;\n  last_ac: string;\n\n  daily_data: { date: number; count: number }[];\n  edges: { contest_id: string; problem_id: string }[];\n}\n\nclass UserPage extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      first_ranking: [],\n      fast_ranking: [],\n      short_ranking: [],\n\n      problems: [],\n      submissions: [],\n      user_info: {\n        accepted_count: 1e9 + 7,\n        accepted_count_rank: 1e9 + 7,\n        rated_point_sum: 1e9 + 7,\n        rated_point_sum_rank: 1e9 + 7,\n        user_id: \"\"\n      },\n      contests: [],\n\n      problem_performances: [],\n\n      current_streak: 1e9 + 7,\n      longest_streak: 1e9 + 7,\n      last_ac: \"\",\n\n      daily_data: [],\n      edges: []\n    };\n  }\n\n  componentDidMount() {\n    Promise.all([\n      Api.fetchMergedProblems(),\n      Api.fetchContestProblemPairs(),\n      Api.fetchProblemPerformances(),\n      Api.fetchContests()\n    ]).then(([problems, edges, problem_performances, contests]) => {\n      const fast_ranking = Api.getFastRanking(problems).sort(\n        (a, b) => b.problem_count - a.problem_count\n      );\n      const short_ranking = Api.getShortRanking(problems).sort(\n        (a, b) => b.problem_count - a.problem_count\n      );\n      const first_ranking = Api.getFirstRanking(problems).sort(\n        (a, b) => b.problem_count - a.problem_count\n      );\n      this.setState({\n        fast_ranking,\n        first_ranking,\n        short_ranking,\n        problems,\n        edges,\n        problem_performances,\n        contests\n      });\n    });\n    this.updateState(this.getUserIdFromProps());\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (this.props !== prevProps) {\n      this.updateState(this.getUserIdFromProps());\n    }\n  }\n\n  updateState(user_id: string) {\n    Api.fetchSubmissions(user_id).then(submissions => {\n      const first_ac_map = submissions\n        .filter(s => isAccepted(s.result))\n        .sort((a, b) => b.epoch_second - a.epoch_second)\n        .reduce(\n          (map, s) => map.set(s.problem_id, s.epoch_second),\n          new Map<string, number>()\n        );\n      const { longest_streak, current_streak, last_ac } = get_streak(\n        first_ac_map\n      );\n      const date_count_map = Array.from(first_ac_map).reduce(\n        (map, [problem_id, second]) => {\n          const date = formatDate(second);\n          const count = map.get(date);\n          if (count) {\n            return map.set(date, count + 1);\n          } else {\n            return map.set(date, 1);\n          }\n        },\n        new Map<string, number>()\n      );\n      const daily_data = Array.from(date_count_map)\n        .map(([date, count]) => ({ date: new Date(date).getTime(), count }))\n        .sort((a, b) => a.date - b.date);\n      this.setState({\n        submissions,\n        longest_streak,\n        current_streak,\n        last_ac,\n        daily_data\n      });\n    });\n    Api.fetchUserInfo(user_id).then(user_info => this.setState({ user_info }));\n  }\n\n  getUserIdFromProps() {\n    return this.props.user_ids.length > 0 ? this.props.user_ids[0] : \"\";\n  }\n\n  render() {\n    const user_id = this.getUserIdFromProps();\n    const {\n      submissions,\n      user_info,\n      longest_streak,\n      current_streak,\n      last_ac,\n      problems,\n      edges,\n      problem_performances,\n      contests\n    } = this.state;\n    if (user_id.length == 0 || submissions.length == 0) {\n      return null;\n    }\n\n    const shortest_rank = get_rank(user_id, this.state.short_ranking);\n    const fastest_rank = get_rank(user_id, this.state.fast_ranking);\n    const first_rank = get_rank(user_id, this.state.first_ranking);\n\n    const climbing_data = this.state.daily_data.map(d => Object.assign({}, d));\n    climbing_data.forEach((_, i) => {\n      if (i > 0) {\n        climbing_data[i].count += climbing_data[i - 1].count;\n      }\n    });\n\n    const ac_submissions = submissions.filter(\n      s => s.user_id === user_id && isAccepted(s.result)\n    );\n\n    const agc_solved = countSolved(/^agc\\d{3}$/, edges, ac_submissions);\n    const abc_solved = countSolved(/^abc\\d{3}$/, edges, ac_submissions);\n    const arc_solved = countSolved(/^arc\\d{3}$/, edges, ac_submissions);\n\n    const achievements = [\n      {\n        key: \"Accepted\",\n        value: user_info.accepted_count,\n        rank: user_info.accepted_count_rank\n      },\n      {\n        key: \"Shortest Code\",\n        value: shortest_rank.count,\n        rank: shortest_rank.rank\n      },\n      {\n        key: \"Fastest Code\",\n        value: fastest_rank.count,\n        rank: fastest_rank.rank\n      },\n      {\n        key: \"First AC\",\n        value: first_rank.count,\n        rank: first_rank.rank\n      }\n    ];\n\n    return (\n      <div>\n        <Row className=\"my-2 border-bottom\">\n          <h1>{user_id}</h1>\n        </Row>\n        <Row className=\"my-3\">\n          {achievements.map(({ key, value, rank }) => (\n            <Col key={key} className=\"text-center\" xs=\"6\" md=\"3\">\n              <h6>{key}</h6>\n              <h3>{value}</h3>\n              <h6 className=\"text-muted\">{`${rank + 1}${ordinalSuffixOf(\n                rank + 1\n              )}`}</h6>\n            </Col>\n          ))}\n          <Col key=\"Rated Point Sum\" className=\"text-center\" xs=\"6\" md=\"3\">\n            <h6>Rated Point Sum</h6>\n            <h3>{user_info.rated_point_sum} pt</h3>\n            <h6 className=\"text-muted\">{`${user_info.rated_point_sum_rank +\n              1}${ordinalSuffixOf(user_info.rated_point_sum_rank + 1)}`}</h6>\n          </Col>\n          <Col key=\"Longest Streak\" className=\"text-center\" xs=\"6\" md=\"3\">\n            <h6>Longest Streak</h6>\n            <h3>{longest_streak} days</h3>\n          </Col>\n          <Col key=\"Current Streak\" className=\"text-center\" xs=\"6\" md=\"3\">\n            <h6>Current Streak</h6>\n            <h3>{current_streak} days</h3>\n            <h6 className=\"text-muted\">{`Last AC: ${last_ac}`}</h6>\n          </Col>\n          <Col />\n        </Row>\n\n        <PieCharts problems={abc_solved} title=\"AtCoder Beginner Contest\" />\n        <PieCharts problems={arc_solved} title=\"AtCoder Regular Contest\" />\n        <PieCharts problems={agc_solved} title=\"AtCoder Grand Contest\" />\n\n        <Row className=\"my-2 border-bottom\">\n          <h1>Daily Effort</h1>\n        </Row>\n        <DailyEffortBarChart daily_data={this.state.daily_data} />\n\n        <Row className=\"my-2 border-bottom\">\n          <h1>Climbing</h1>\n        </Row>\n        <ClimbingLineChart climbing_data={climbing_data} />\n\n        <Row className=\"my-2 border-bottom\">\n          <h1>Heatmap</h1>\n        </Row>\n        <FilteringHeatmap\n          submissions={submissions.filter(s => s.user_id === user_id)}\n        />\n\n        <Row className=\"my-2 border-bottom\">\n          <h1>Submissions</h1>\n        </Row>\n        <SubmissionList\n          problems={problems}\n          submissions={submissions.filter(s => s.user_id === user_id)}\n        />\n\n        <Row className=\"my-2 border-bottom\">\n          <h1>Languages</h1>\n        </Row>\n        <LanguageCount\n          submissions={submissions.filter(s => s.user_id === user_id)}\n        />\n\n        <Row className=\"my-2 border-bottom\">\n          <h1>Recommendations</h1>\n        </Row>\n        <Recommendations\n          submissions={submissions}\n          problems={problems}\n          contests={contests}\n          performances={problem_performances}\n        />\n      </div>\n    );\n  }\n}\n\nconst PieCharts = ({\n  problems,\n  title\n}: {\n  problems: { total: number; solved: number }[];\n  title: string;\n}) => (\n  <div>\n    <Row className=\"my-2 border-bottom\">\n      <h1>{title}</h1>\n    </Row>\n    <Row className=\"my-3\">\n      {problems.map(({ solved, total }, i) => {\n        const key = \"ABCDEF\".charAt(i);\n        return (\n          <Col\n            key={key}\n            className=\"text-center\"\n            xs=\"6\"\n            md={12 / problems.length}\n          >\n            <SmallPieChart\n              accepted={solved}\n              trying={total - solved}\n              title={`Problem ${key}`}\n            />\n          </Col>\n        );\n      })}\n    </Row>\n  </div>\n);\n\nconst get_streak = (first_ac_map: Map<string, number>) => {\n  let longest_streak = 1;\n  let current_streak = 1;\n  const seconds = Array.from(first_ac_map)\n    .map(([problem_id, epoch_second]) => epoch_second)\n    .sort();\n  for (let index = 1; index < seconds.length; index++) {\n    const second1 = seconds[index - 1];\n    const second2 = seconds[index];\n    if (formatDate(second2) === formatDate(second1)) {\n      continue;\n    }\n    if (formatDate(second2) === formatDate(second1 + 24 * 3600)) {\n      current_streak += 1;\n    } else {\n      longest_streak = Math.max(longest_streak, current_streak);\n      current_streak = 1;\n    }\n  }\n  longest_streak = Math.max(longest_streak, current_streak);\n  const today = new Date().getTime() / 1000;\n  const last_ac_second = seconds[seconds.length - 1];\n\n  if (\n    formatDate(today) !== formatDate(last_ac_second) &&\n    formatDate(today) !== formatDate(last_ac_second + 24 * 3600)\n  ) {\n    current_streak = 0;\n  }\n  return {\n    longest_streak,\n    current_streak,\n    last_ac: formatDate(last_ac_second)\n  };\n};\n\nconst get_rank = (user_id: string, ranking: RankingEntry[]) => {\n  const rank = ranking.filter(rank => rank.user_id == user_id)[0];\n  if (!rank) {\n    return { count: 0, rank: ranking.length };\n  }\n  const { problem_count } = rank;\n  const index = ranking\n    .map(({ problem_count }, i) => {\n      return { count: problem_count, i };\n    })\n    .filter(({ count }) => count == problem_count)\n    .reduce((min, { i }) => Math.min(i, min), ranking.length);\n  return { count: ranking[index].problem_count, rank: index };\n};\n\nconst countSolved = (\n  contestRegexp: RegExp,\n  edges: { contest_id: string; problem_id: string }[],\n  acSubmissions: Submission[]\n) => {\n  const regexps = [/_[a1]/, /_[b2]/, /_[c3]/, /_[d4]/, /_[e5]/, /_[f6]/];\n  const problemIdSet = new Set(\n    edges.filter(e => e.contest_id.match(contestRegexp)).map(e => e.problem_id)\n  );\n  const acProblemIdSet = new Set(\n    acSubmissions\n      .filter(s => problemIdSet.has(s.problem_id))\n      .map(s => s.problem_id)\n  );\n\n  const shiftedProblemIds = new Set(\n    edges\n      .filter(e => e.contest_id.match(contestRegexp))\n      .filter(e => e.contest_id.substring(0, 6) != e.problem_id.substring(0, 6))\n      .map(e => e.problem_id)\n  );\n\n  const count = regexps.map(_ => ({ total: 0, solved: 0 }));\n  regexps.forEach((regexp, i) => {\n    problemIdSet.forEach(id => {\n      if (id.match(regexp)) {\n        if (shiftedProblemIds.has(id)) {\n          count[i + 2].total += 1;\n        } else {\n          count[i].total += 1;\n        }\n      }\n    });\n    acProblemIdSet.forEach(id => {\n      if (id.match(regexp)) {\n        if (shiftedProblemIds.has(id)) {\n          count[i + 2].solved += 1;\n        } else {\n          count[i].solved += 1;\n        }\n      }\n    });\n  });\n  return count.filter(c => c.total > 0);\n};\n\nexport default UserPage;\n","import React from \"react\";\nimport { NavLink as RouterLink } from \"react-router-dom\";\nimport { withRouter, RouteComponentProps } from \"react-router\";\nimport {\n  Navbar,\n  NavbarBrand,\n  Nav,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  Form,\n  Input,\n  Button,\n  FormGroup\n} from \"reactstrap\";\nimport { ATCODER_USER_REGEXP, ATCODER_RIVALS_REGEXP } from \"../utils\";\n\nenum PageKind {\n  TABLE = \"table\",\n  LIST = \"list\",\n  USER = \"user\"\n}\n\ninterface State {\n  user_id: string;\n  rival_id: string;\n  kind: PageKind;\n}\n\nclass PrimitiveNavigationBar extends React.Component<\n  RouteComponentProps,\n  State\n  > {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      user_id: \"\",\n      rival_id: \"\",\n      kind: PageKind.TABLE\n    };\n  }\n\n  submit(nextKind: PageKind) {\n    this.setState({ kind: nextKind });\n    const { user_id, rival_id } = this.state;\n\n    const users: string[] = [];\n    if (user_id.match(ATCODER_USER_REGEXP)) {\n      users.push(user_id);\n    } else {\n      users.push(\"\");\n    }\n    if (rival_id.match(ATCODER_RIVALS_REGEXP)) {\n      rival_id\n        .split(\",\")\n        .filter(user => user.length > 0)\n        .forEach(user => users.push(user));\n    }\n\n    const current_pathname = this.props.location.pathname;\n\n    const next_pathname = \"/\" + nextKind + \"/\" + users.join(\"/\");\n    if (current_pathname !== next_pathname) {\n      this.props.history.push(next_pathname);\n    }\n  }\n\n  componentDidMount() {\n    const { kind, user_id, rival_id } = this.mapPropsToState();\n    this.setState({ kind, user_id, rival_id });\n  }\n\n  componentDidUpdate(prevProps: RouteComponentProps) {\n    if (this.props.location.pathname !== prevProps.location.pathname) {\n      const { kind, user_id, rival_id } = this.mapPropsToState();\n      this.setState({ kind, user_id, rival_id });\n    }\n  }\n\n  mapPropsToState() {\n    let kind = PageKind.TABLE;\n    const { pathname } = this.props.location;\n    if (pathname.match(/^\\/user/)) {\n      kind = PageKind.USER;\n    } else if (pathname.match(/^\\/list/)) {\n      kind = PageKind.LIST;\n    }\n\n    const params = pathname.split(\"/\");\n    const user_id = params.length >= 3 ? params[2] : \"\";\n    const rival_id = params\n      .slice(3)\n      .filter(x => x.length > 0)\n      .join(\",\");\n    return { kind, user_id, rival_id };\n  }\n\n  render() {\n    let root_url = \"/\";\n    if (this.state.user_id.length > 0 || this.state.rival_id.length > 0) {\n      root_url += \"table/\";\n    }\n    if (this.state.user_id.length > 0) {\n      root_url += this.state.user_id + \"/\";\n    }\n    if (this.state.rival_id.length > 0) {\n      root_url += this.state.rival_id\n        .split(\",\")\n        .filter(s => s.match(ATCODER_USER_REGEXP))\n        .join(\"/\");\n    }\n    return (\n      <Navbar color=\"light\" light expand=\"md\">\n        <NavbarBrand tag={RouterLink} to={root_url}>\n          AtCoder Problems (Static)\n        </NavbarBrand>\n        <Nav className=\"ml-auto\" navbar>\n          <Form inline>\n            <FormGroup className=\"mb-2 mr-sm-2 mb-sm-0\">\n              <Input\n                style={{ width: \"150px\" }}\n                onKeyPress={e => {\n                  if (e.key == \"Enter\") {\n                    this.submit(this.state.kind);\n                  }\n                }}\n                value={this.state.user_id}\n                type=\"text\"\n                name=\"user_id\"\n                id=\"user_id\"\n                placeholder=\"User ID\"\n                onChange={e => this.setState({ user_id: e.target.value })}\n              />\n            </FormGroup>\n            <FormGroup className=\"mb-2 mr-sm-2 mb-sm-0\">\n              <Input\n                style={{ width: \"150px\" }}\n                onKeyPress={e => {\n                  if (e.key == \"Enter\") {\n                    this.submit(this.state.kind);\n                  }\n                }}\n                value={this.state.rival_id}\n                type=\"text\"\n                name=\"rival_id\"\n                id=\"rival_id\"\n                placeholder=\"Rival ID, ...\"\n                onChange={e => this.setState({ rival_id: e.target.value })}\n              />\n            </FormGroup>\n            <Button\n              className=\"mb-2 mr-sm-2 mb-sm-0\"\n              onClick={() => {\n                this.submit(PageKind.TABLE);\n              }}\n            >\n              Table\n            </Button>\n            <Button\n              className=\"mb-2 mr-sm-2 mb-sm-0\"\n              onClick={() => {\n                this.submit(PageKind.LIST);\n              }}\n            >\n              List\n            </Button>\n            <Button\n              className=\"mb-2 mr-sm-2 mb-sm-0\"\n              onClick={() => {\n                this.submit(PageKind.USER);\n              }}\n            >\n              User Page\n            </Button>\n          </Form>\n        </Nav>\n        <Nav className=\"ml-auto\" navbar>\n          <UncontrolledDropdown nav inNavbar>\n            <DropdownToggle nav caret>\n              Rankings\n            </DropdownToggle>\n            <DropdownMenu right>\n              <DropdownItem tag={RouterLink} to=\"/ac\">\n                AC Count\n              </DropdownItem>\n              <DropdownItem tag={RouterLink} to=\"/fast\">\n                Fastest Submissions\n              </DropdownItem>\n              <DropdownItem tag={RouterLink} to=\"/short\">\n                Shortest Submissions\n              </DropdownItem>\n              <DropdownItem tag={RouterLink} to=\"/first\">\n                First AC\n              </DropdownItem>\n              <DropdownItem tag={RouterLink} to=\"/sum\">\n                Rated Point Ranking\n              </DropdownItem>\n              <DropdownItem tag={RouterLink} to=\"/lang\">\n                Language Owners\n              </DropdownItem>\n            </DropdownMenu>\n          </UncontrolledDropdown>\n\n          <UncontrolledDropdown nav inNavbar>\n            <DropdownToggle nav caret>\n              Other\n            </DropdownToggle>\n            <DropdownMenu right>\n              <DropdownItem tag={RouterLink} to=\"/monitor\">\n                Monitoring\n              </DropdownItem>\n            </DropdownMenu>\n          </UncontrolledDropdown>\n\n          <UncontrolledDropdown nav inNavbar>\n            <DropdownToggle nav caret>\n              Links\n            </DropdownToggle>\n            <DropdownMenu right>\n              <DropdownItem tag=\"a\" href=\"https://atcoder.jp/\" target=\"_blank\">\n                AtCoder\n              </DropdownItem>\n              <DropdownItem\n                tag=\"a\"\n                href=\"http://aoj-icpc.ichyo.jp/\"\n                target=\"_blank\"\n              >\n                AOJ-ICPC\n              </DropdownItem>\n              <DropdownItem\n                tag=\"a\"\n                href=\"https://github.com/kenkoooo/AtCoderProblems\"\n                target=\"_blank\"\n              >\n                GitHub (original)\n              </DropdownItem>\n              <DropdownItem\n                tag=\"a\"\n                href=\"https://github.com/kmyk/AtCoderProblemsStatic\"\n                target=\"_blank\"\n              >\n                GitHub\n              </DropdownItem>\n              <DropdownItem\n                tag=\"a\"\n                href=\"https://twitter.com/kenkoooo\"\n                target=\"_blank\"\n              >\n                @kenkoooo\n              </DropdownItem>\n              <DropdownItem\n                tag=\"a\"\n                href=\"https://github.com/kmyk\"\n                target=\"_blank\"\n              >\n                @kmyk\n              </DropdownItem>\n            </DropdownMenu>\n          </UncontrolledDropdown>\n        </Nav>{\" \"}\n      </Navbar>\n    );\n  }\n}\n\nconst NavigationBar = withRouter(PrimitiveNavigationBar);\n\nexport default NavigationBar;\n","import React from \"react\";\nimport { Row, Card, CardImg, CardTitle, CardSubtitle, CardBody } from \"reactstrap\";\nimport Col from \"reactstrap/lib/Col\";\n\nconst Monitor = () => (\n  <Row><Col md=\"3\" xs=\"6\"><Card>\n    <CardImg top width=\"100%\" src=\"https://kenkoooo.com/atcoder/monitor/postgresql-ebs.png\" alt=\"Card image cap\" />\n    <CardBody>\n      <CardTitle>Remaining BurstBalance of PostgreSQL</CardTitle>\n      <CardSubtitle>\n        If this value reaches 0, the I/O operations to the database will be restricted and the API server and the crawlers will be killed.\n      </CardSubtitle>\n    </CardBody>\n  </Card></Col></Row>);\n\nexport default Monitor;\n","import React, { Component } from \"react\";\nimport {\n  HashRouter as Router,\n  Route,\n  Switch,\n  Redirect\n} from \"react-router-dom\";\nimport { Badge, Container } from \"reactstrap\";\n\nimport ACRanking from \"./pages/ACRanking\";\nimport FastestRanking from \"./pages/FastestRanking\";\nimport FirstRanking from \"./pages/FirstRanking\";\nimport ShortRanking from \"./pages/ShortRanking\";\nimport SumRanking from \"./pages/SumRanking\";\nimport LanguageOwners from \"./pages/LanguageOwners\";\nimport ListPage from \"./pages/ListPage\";\nimport UserPage from \"./pages/UserPage\";\nimport TablePage from \"./pages/TablePage\";\nimport Monitor from './pages/Monitor';\n\nimport NavigationBar from \"./components/NavigationBar\";\nimport { ATCODER_USER_REGEXP, ATCODER_RIVALS_REGEXP } from \"./utils\";\ntype MatchUserId = { match: { params: { user_id?: string } } };\nconst extractUserId = ({\n  match: {\n    params: { user_id }\n  }\n}: MatchUserId) => (user_id ? user_id.split(\"/\") : []);\n\nconst EdgeWarning = () => {\n  const user_agent = window.navigator.userAgent;\n  const is_edge_browser = user_agent.indexOf(\"Edge\") !== -1;\n  return is_edge_browser ? <Badge color=\"danger\">MicrosoftEdge is not supported.</Badge> : null;\n};\n\nclass App extends Component {\n  render() {\n    const params = new URLSearchParams(location.search);\n    const user_param = params.get(\"user\");\n    const rivals_param = params.get(\"rivals\");\n    const kind_param = params.get(\"kind\");\n\n    return (\n      <Router>\n        <div>\n          <NavigationBar />\n          <Container style={{ width: \"100%\", maxWidth: \"90%\" }}>\n            <EdgeWarning></EdgeWarning>\n            <Switch>\n              <Route exact path=\"/ac\" component={ACRanking} />\n              <Route exact path=\"/fast\" component={FastestRanking} />\n              <Route exact path=\"/short\" component={ShortRanking} />\n              <Route exact path=\"/first\" component={FirstRanking} />\n              <Route exact path=\"/sum\" component={SumRanking} />\n              <Route exact path=\"/lang\" component={LanguageOwners} />\n              <Route exact path=\"/monitor\" component={Monitor} />\n              <Route\n                path=\"/user/:user_id([a-zA-Z0-9_]*)*\"\n                component={(props: MatchUserId) => (\n                  <UserPage user_ids={extractUserId(props)} />\n                )}\n              />\n              <Route\n                path=\"/table/:user_id([a-zA-Z0-9_]*)*\"\n                component={(props: MatchUserId) => (\n                  <TablePage user_ids={extractUserId(props)} />\n                )}\n              />\n              <Route\n                path=\"/list/:user_id([a-zA-Z0-9_]*)*\"\n                component={(props: MatchUserId) => (\n                  <ListPage user_ids={extractUserId(props)} />\n                )}\n              />\n              <Route\n                exact\n                path=\"/\"\n                render={() => {\n                  const user =\n                    user_param != null && user_param.match(ATCODER_USER_REGEXP)\n                      ? user_param\n                      : \"\";\n                  const rivals =\n                    rivals_param != null &&\n                      rivals_param.match(ATCODER_RIVALS_REGEXP)\n                      ? rivals_param.split(\",\")\n                      : [];\n                  const kind =\n                    kind_param === \"list\"\n                      ? \"list\"\n                      : kind_param === \"user\"\n                        ? \"user\"\n                        : \"table\";\n\n                  return (\n                    <Redirect to={`/${kind}/${user}/${rivals.join(\"/\")}`} />\n                  );\n                }}\n              />\n            </Switch>\n          </Container>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-bootstrap-table/dist/react-bootstrap-table-all.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}